// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "counter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic counter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic counter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> counter::ap_ST_fsm_state1 = "1";
const sc_lv<4> counter::ap_ST_fsm_state2 = "10";
const sc_lv<4> counter::ap_ST_fsm_state3 = "100";
const sc_lv<4> counter::ap_ST_fsm_state4 = "1000";
const sc_lv<32> counter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> counter::ap_const_lv1_0 = "0";
const int counter::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> counter::ap_const_lv32_2 = "10";
const sc_lv<32> counter::ap_const_lv32_1 = "1";
const sc_lv<32> counter::ap_const_lv32_3 = "11";
const sc_lv<1> counter::ap_const_lv1_1 = "1";
const bool counter::ap_const_boolean_1 = true;

counter::counter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    counter_ctrl_s_axi_U = new counter_ctrl_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("counter_ctrl_s_axi_U");
    counter_ctrl_s_axi_U->AWVALID(s_axi_ctrl_AWVALID);
    counter_ctrl_s_axi_U->AWREADY(s_axi_ctrl_AWREADY);
    counter_ctrl_s_axi_U->AWADDR(s_axi_ctrl_AWADDR);
    counter_ctrl_s_axi_U->WVALID(s_axi_ctrl_WVALID);
    counter_ctrl_s_axi_U->WREADY(s_axi_ctrl_WREADY);
    counter_ctrl_s_axi_U->WDATA(s_axi_ctrl_WDATA);
    counter_ctrl_s_axi_U->WSTRB(s_axi_ctrl_WSTRB);
    counter_ctrl_s_axi_U->ARVALID(s_axi_ctrl_ARVALID);
    counter_ctrl_s_axi_U->ARREADY(s_axi_ctrl_ARREADY);
    counter_ctrl_s_axi_U->ARADDR(s_axi_ctrl_ARADDR);
    counter_ctrl_s_axi_U->RVALID(s_axi_ctrl_RVALID);
    counter_ctrl_s_axi_U->RREADY(s_axi_ctrl_RREADY);
    counter_ctrl_s_axi_U->RDATA(s_axi_ctrl_RDATA);
    counter_ctrl_s_axi_U->RRESP(s_axi_ctrl_RRESP);
    counter_ctrl_s_axi_U->BVALID(s_axi_ctrl_BVALID);
    counter_ctrl_s_axi_U->BREADY(s_axi_ctrl_BREADY);
    counter_ctrl_s_axi_U->BRESP(s_axi_ctrl_BRESP);
    counter_ctrl_s_axi_U->ACLK(ap_clk);
    counter_ctrl_s_axi_U->ARESET(ap_rst_n_inv);
    counter_ctrl_s_axi_U->ACLK_EN(ap_var_for_const0);
    counter_ctrl_s_axi_U->ap_start(ap_start);
    counter_ctrl_s_axi_U->interrupt(interrupt);
    counter_ctrl_s_axi_U->ap_ready(ap_ready);
    counter_ctrl_s_axi_U->ap_done(ap_done);
    counter_ctrl_s_axi_U->ap_idle(ap_idle);
    counter_ctrl_s_axi_U->range_r(range_r);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_led_out);
    sensitive << ( led_status );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_led_out_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_temp_count_1_fu_92_p2);
    sensitive << ( temp_count_fu_36 );

    SC_METHOD(thread_tmp_2_fu_79_p2);
    sensitive << ( led_status );

    SC_METHOD(thread_tmp_fu_69_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( range_assign_fu_32 );
    sensitive << ( temp_count_fu_36 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_69_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    led_status = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "counter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, led_out, "(port)led_out");
    sc_trace(mVcdFile, led_out_ap_vld, "(port)led_out_ap_vld");
    sc_trace(mVcdFile, s_axi_ctrl_AWVALID, "(port)s_axi_ctrl_AWVALID");
    sc_trace(mVcdFile, s_axi_ctrl_AWREADY, "(port)s_axi_ctrl_AWREADY");
    sc_trace(mVcdFile, s_axi_ctrl_AWADDR, "(port)s_axi_ctrl_AWADDR");
    sc_trace(mVcdFile, s_axi_ctrl_WVALID, "(port)s_axi_ctrl_WVALID");
    sc_trace(mVcdFile, s_axi_ctrl_WREADY, "(port)s_axi_ctrl_WREADY");
    sc_trace(mVcdFile, s_axi_ctrl_WDATA, "(port)s_axi_ctrl_WDATA");
    sc_trace(mVcdFile, s_axi_ctrl_WSTRB, "(port)s_axi_ctrl_WSTRB");
    sc_trace(mVcdFile, s_axi_ctrl_ARVALID, "(port)s_axi_ctrl_ARVALID");
    sc_trace(mVcdFile, s_axi_ctrl_ARREADY, "(port)s_axi_ctrl_ARREADY");
    sc_trace(mVcdFile, s_axi_ctrl_ARADDR, "(port)s_axi_ctrl_ARADDR");
    sc_trace(mVcdFile, s_axi_ctrl_RVALID, "(port)s_axi_ctrl_RVALID");
    sc_trace(mVcdFile, s_axi_ctrl_RREADY, "(port)s_axi_ctrl_RREADY");
    sc_trace(mVcdFile, s_axi_ctrl_RDATA, "(port)s_axi_ctrl_RDATA");
    sc_trace(mVcdFile, s_axi_ctrl_RRESP, "(port)s_axi_ctrl_RRESP");
    sc_trace(mVcdFile, s_axi_ctrl_BVALID, "(port)s_axi_ctrl_BVALID");
    sc_trace(mVcdFile, s_axi_ctrl_BREADY, "(port)s_axi_ctrl_BREADY");
    sc_trace(mVcdFile, s_axi_ctrl_BRESP, "(port)s_axi_ctrl_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, range_r, "range_r");
    sc_trace(mVcdFile, led_status, "led_status");
    sc_trace(mVcdFile, tmp_2_fu_79_p2, "tmp_2_fu_79_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_69_p2, "tmp_fu_69_p2");
    sc_trace(mVcdFile, range_assign_fu_32, "range_assign_fu_32");
    sc_trace(mVcdFile, temp_count_fu_36, "temp_count_fu_36");
    sc_trace(mVcdFile, temp_count_1_fu_92_p2, "temp_count_1_fu_92_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("counter.hdltvin.dat");
    mHdltvoutHandle.open("counter.hdltvout.dat");
}

counter::~counter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete counter_ctrl_s_axi_U;
}

void counter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void counter::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        temp_count_fu_36 = temp_count_1_fu_92_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        temp_count_fu_36 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        led_status = tmp_2_fu_79_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        range_assign_fu_32 = range_r.read();
    }
}

void counter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void counter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void counter::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void counter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void counter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void counter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void counter::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void counter::thread_led_out() {
    led_out =  (sc_logic) ((led_status.read() ^ ap_const_lv1_1))[0];
}

void counter::thread_led_out_ap_vld() {
    if ((esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        led_out_ap_vld = ap_const_logic_1;
    } else {
        led_out_ap_vld = ap_const_logic_0;
    }
}

void counter::thread_temp_count_1_fu_92_p2() {
    temp_count_1_fu_92_p2 = (!temp_count_fu_36.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(temp_count_fu_36.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void counter::thread_tmp_2_fu_79_p2() {
    tmp_2_fu_79_p2 = (led_status.read() ^ ap_const_lv1_1);
}

void counter::thread_tmp_fu_69_p2() {
    tmp_fu_69_p2 = (!temp_count_fu_36.read().is_01() || !range_assign_fu_32.read().is_01())? sc_lv<1>(): (sc_bigint<32>(temp_count_fu_36.read()) < sc_bigint<32>(range_assign_fu_32.read()));
}

void counter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void counter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"led_out\" :  \"" << led_out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"led_out_ap_vld\" :  \"" << led_out_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_AWVALID\" :  \"" << s_axi_ctrl_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_AWREADY\" :  \"" << s_axi_ctrl_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_AWADDR\" :  \"" << s_axi_ctrl_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WVALID\" :  \"" << s_axi_ctrl_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_WREADY\" :  \"" << s_axi_ctrl_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WDATA\" :  \"" << s_axi_ctrl_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WSTRB\" :  \"" << s_axi_ctrl_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_ARVALID\" :  \"" << s_axi_ctrl_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_ARREADY\" :  \"" << s_axi_ctrl_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_ARADDR\" :  \"" << s_axi_ctrl_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RVALID\" :  \"" << s_axi_ctrl_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_RREADY\" :  \"" << s_axi_ctrl_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RDATA\" :  \"" << s_axi_ctrl_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RRESP\" :  \"" << s_axi_ctrl_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_BVALID\" :  \"" << s_axi_ctrl_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_BREADY\" :  \"" << s_axi_ctrl_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_BRESP\" :  \"" << s_axi_ctrl_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

