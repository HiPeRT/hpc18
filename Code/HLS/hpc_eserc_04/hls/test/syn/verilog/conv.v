// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=36326881,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=2388,HLS_SYN_LUT=4070,HLS_VERSION=2018_2}" *)

module conv (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] image_r;
wire   [31:0] newImage;
wire   [31:0] filter;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond1_fu_497_p2;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state39;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state40;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state41;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [31:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
wire   [32:0] tmp_9_cast_fu_341_p1;
reg   [32:0] tmp_9_cast_reg_971;
wire   [30:0] tmp_17_cast_fu_355_p1;
reg   [30:0] tmp_17_cast_reg_976;
wire   [30:0] tmp_18_cast_fu_369_p1;
reg   [30:0] tmp_18_cast_reg_981;
wire   [8:0] i_cast_fu_373_p1;
reg   [8:0] i_cast_reg_986;
wire    ap_CS_fsm_state2;
wire   [7:0] i_1_fu_383_p2;
reg   [7:0] i_1_reg_994;
wire   [9:0] j_cast_fu_389_p1;
reg   [9:0] j_cast_reg_999;
wire    ap_CS_fsm_state3;
wire   [8:0] j_1_fu_399_p2;
reg   [8:0] j_1_reg_1007;
wire  signed [12:0] tmp_20_cast_fu_427_p1;
reg  signed [12:0] tmp_20_cast_reg_1012;
wire   [0:0] exitcond3_fu_393_p2;
wire   [1:0] d_1_fu_437_p2;
reg   [1:0] d_1_reg_1020;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_s_fu_443_p1;
reg   [63:0] tmp_s_reg_1025;
wire   [0:0] exitcond2_fu_431_p2;
wire   [4:0] tmp_18_fu_474_p3;
reg   [4:0] tmp_18_reg_1030;
reg   [31:0] mem_addr_reg_1035;
wire   [1:0] m_1_fu_503_p2;
reg   [1:0] m_1_reg_1045;
reg    ap_sig_ioackin_mem_ARREADY;
reg    ap_block_state5_io;
wire   [17:0] tmp_33_fu_578_p2;
reg   [17:0] tmp_33_reg_1050;
wire   [4:0] tmp_1_fu_596_p2;
reg   [4:0] tmp_1_reg_1055;
wire   [0:0] tmp1_fu_602_p2;
reg   [0:0] tmp1_reg_1060;
wire   [62:0] tmp_19_fu_612_p1;
reg   [62:0] tmp_19_reg_1065;
wire   [1:0] n_1_fu_622_p2;
reg   [1:0] n_1_reg_1073;
wire    ap_CS_fsm_state6;
wire   [1:0] nn_fu_628_p2;
reg   [1:0] nn_reg_1078;
wire   [0:0] exitcond_fu_616_p2;
wire   [9:0] colIndex_fu_644_p2;
reg   [9:0] colIndex_reg_1083;
wire   [0:0] or_cond6_fu_675_p2;
reg   [0:0] or_cond6_reg_1088;
wire   [1:0] tmp_40_fu_732_p1;
reg   [1:0] tmp_40_reg_1092;
wire    ap_CS_fsm_state7;
wire   [30:0] image2_sum_fu_736_p2;
reg   [30:0] image2_sum_reg_1097;
reg   [31:0] mem_addr_2_reg_1102;
reg   [31:0] mem_addr_1_read_reg_1114;
wire   [7:0] tmp_43_fu_795_p1;
reg   [7:0] tmp_43_reg_1119;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_321_p1;
reg   [31:0] tmp_12_reg_1129;
reg   [31:0] mem_addr_2_read_reg_1134;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_317_p2;
reg   [31:0] tmp_15_reg_1144;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_311_p2;
reg   [31:0] sum_2_reg_1149;
wire    ap_CS_fsm_state31;
wire   [31:0] tmp_3_fu_324_p1;
reg   [31:0] tmp_3_reg_1154;
wire    ap_CS_fsm_state33;
reg   [7:0] loc_V_reg_1159;
wire    ap_CS_fsm_state38;
wire   [22:0] loc_V_1_fu_833_p1;
reg   [22:0] loc_V_1_reg_1165;
wire   [0:0] isNeg_fu_846_p3;
reg   [0:0] isNeg_reg_1170;
wire  signed [8:0] sh_assign_1_fu_863_p3;
reg  signed [8:0] sh_assign_1_reg_1175;
reg   [31:0] mem_addr_read_reg_1181;
wire   [31:0] tmp_29_fu_965_p2;
reg   [31:0] tmp_29_reg_1186;
reg    ap_sig_ioackin_mem_AWREADY;
reg   [7:0] i_reg_220;
reg   [8:0] j_reg_231;
wire   [0:0] exitcond4_fu_377_p2;
reg   [1:0] d_reg_242;
reg   [31:0] sum_reg_253;
reg   [1:0] m_reg_265;
reg   [31:0] sum_1_reg_276;
reg   [31:0] ap_phi_mux_sum_1_be_phi_fu_303_p4;
wire    ap_CS_fsm_state32;
reg   [1:0] n_reg_288;
reg   [31:0] sum_1_be_reg_299;
wire   [63:0] newImage4_sum_cast_fu_487_p1;
wire   [63:0] filter6_sum_cast_fu_759_p1;
wire   [63:0] image2_sum_cast_fu_769_p1;
reg    ap_reg_ioackin_mem_ARREADY;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
reg   [31:0] grp_fu_311_p0;
reg   [31:0] grp_fu_311_p1;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_317_p1;
wire   [31:0] grp_fu_321_p0;
wire   [63:0] tmp_3_fu_324_p0;
wire   [29:0] tmp_fu_331_p4;
wire   [29:0] tmp_4_fu_345_p4;
wire   [29:0] tmp_7_fu_359_p4;
wire   [10:0] tmp_9_fu_409_p3;
wire   [11:0] p_shl7_cast_fu_417_p1;
wire   [11:0] tmp_cast_fu_405_p1;
wire   [11:0] tmp_10_fu_421_p2;
wire   [12:0] tmp_cast_12_fu_447_p1;
wire   [12:0] tmp_14_fu_451_p2;
wire   [7:0] tmp_16_fu_456_p4;
wire   [1:0] tmp_17_fu_470_p1;
wire   [30:0] tmp_23_cast_fu_466_p1;
wire   [30:0] newImage4_sum_fu_482_p2;
wire   [1:0] mm_fu_509_p2;
wire   [1:0] tmp_6_fu_519_p2;
wire  signed [8:0] tmp_6_cast_fu_525_p1;
wire   [8:0] rowIndex_fu_529_p2;
wire   [0:0] tmp_30_fu_534_p3;
wire   [16:0] tmp_31_fu_554_p3;
wire   [14:0] tmp_32_fu_566_p3;
wire  signed [17:0] p_shl2_cast_fu_574_p1;
wire  signed [17:0] p_shl1_cast_fu_562_p1;
wire   [3:0] p_shl_fu_584_p3;
wire   [4:0] p_shl_cast_fu_592_p1;
wire   [4:0] mm_cast5_fu_515_p1;
wire   [0:0] tmp_8_fu_548_p2;
wire   [0:0] rev_fu_542_p2;
wire   [63:0] x_assign_fu_327_p1;
wire   [63:0] p_Val2_s_fu_608_p1;
wire   [1:0] tmp_2_fu_634_p2;
wire  signed [9:0] tmp_2_cast_fu_640_p1;
wire   [0:0] tmp_34_fu_649_p3;
wire   [0:0] tmp_5_fu_663_p2;
wire   [0:0] rev1_fu_657_p2;
wire   [0:0] tmp2_fu_669_p2;
wire   [17:0] tmp_10_cast_fu_683_p1;
wire  signed [17:0] tmp_35_fu_686_p2;
wire   [19:0] tmp_36_fu_695_p3;
wire  signed [63:0] p_shl3_fu_703_p1;
wire  signed [63:0] tmp_35_cast_fu_691_p1;
wire   [63:0] tmp_37_fu_707_p2;
wire   [63:0] tmp_38_fu_713_p2;
wire   [15:0] tmp_39_fu_718_p4;
wire   [30:0] tmp_40_cast_fu_728_p1;
wire   [4:0] nn_cast_fu_680_p1;
wire   [4:0] tmp_13_fu_741_p2;
wire  signed [31:0] tmp_13_cast_fu_746_p1;
wire   [32:0] tmp_14_cast_fu_750_p1;
wire   [32:0] filter6_sum_fu_754_p2;
wire   [4:0] tmp_41_fu_779_p3;
wire   [31:0] tmp_42_fu_786_p1;
wire   [31:0] image_load2_fu_790_p2;
wire   [63:0] p_Result_s_fu_807_p3;
wire   [31:0] p_Val2_1_fu_819_p1;
wire   [8:0] tmp_i_i_i_i_cast3_fu_837_p1;
wire   [8:0] sh_assign_fu_840_p2;
wire   [7:0] tmp_5_i_i_i_fu_854_p2;
wire  signed [8:0] tmp_5_i_i_i_cast_fu_859_p1;
wire   [24:0] tmp_3_i_i_i_fu_871_p4;
wire  signed [31:0] sh_assign_1_cast_fu_884_p1;
wire  signed [24:0] sh_assign_1_cast_cas_fu_887_p1;
wire   [54:0] tmp_3_i_i_i_cast4_fu_880_p1;
wire   [54:0] tmp_7_i_i_i_fu_890_p1;
wire   [24:0] tmp_8_i_i_i_fu_894_p2;
wire   [0:0] tmp_22_fu_906_p3;
wire   [54:0] tmp_i_i_i_fu_900_p2;
wire   [7:0] tmp_20_fu_914_p1;
wire   [7:0] tmp_21_fu_918_p4;
wire   [31:0] tmp_23_fu_935_p1;
wire   [31:0] tmp_24_fu_938_p2;
wire   [31:0] tmp_25_fu_944_p2;
wire   [7:0] p_Val2_4_fu_928_p3;
wire   [31:0] tmp_27_fu_955_p1;
wire   [31:0] tmp_26_fu_950_p2;
wire   [31:0] tmp_28_fu_959_p2;
reg    grp_fu_321_ce;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg   [45:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

conv_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
conv_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .image_r(image_r),
    .newImage(newImage),
    .filter(filter)
);

conv_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
conv_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(mem_addr_reg_1035),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(tmp_29_reg_1186),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_311_p0),
    .din1(grp_fu_311_p1),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_12_reg_1129),
    .din1(grp_fu_317_p1),
    .ce(1'b1),
    .dout(grp_fu_317_p2)
);

conv_sitofp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_sitofp_32ns_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_321_p0),
    .ce(grp_fu_321_ce),
    .dout(grp_fu_321_p1)
);

conv_fptrunc_64nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
conv_fptrunc_64nseOg_U4(
    .din0(tmp_3_fu_324_p0),
    .dout(tmp_3_fu_324_p1)
);

conv_fpext_32ns_6fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
conv_fpext_32ns_6fYi_U5(
    .din0(sum_reg_253),
    .dout(x_assign_fu_327_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if (((~((ap_sig_ioackin_mem_ARREADY == 1'b0) | (mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | ((ap_sig_ioackin_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd1)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((mem_RVALID == 1'b1) & (mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd1)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state40)) begin
            if ((ap_sig_ioackin_mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b0;
            end else if ((mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state41)) begin
            if ((ap_sig_ioackin_mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b0;
            end else if ((mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        d_reg_242 <= 2'd0;
    end else if (((mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        d_reg_242 <= d_1_reg_1020;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_393_p2 == 1'd1))) begin
        i_reg_220 <= i_1_reg_994;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_220 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_231 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_431_p2 == 1'd1))) begin
        j_reg_231 <= j_1_reg_1007;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_616_p2 == 1'd1))) begin
        m_reg_265 <= m_1_reg_1045;
    end else if (((exitcond2_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_reg_265 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        n_reg_288 <= n_1_reg_1073;
    end else if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd0))) begin
        n_reg_288 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond6_reg_1088 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_1_be_reg_299 <= sum_1_reg_276;
    end else if (((1'b1 == ap_CS_fsm_state32) & (or_cond6_reg_1088 == 1'd1))) begin
        sum_1_be_reg_299 <= sum_2_reg_1149;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sum_1_reg_276 <= ap_phi_mux_sum_1_be_phi_fu_303_p4;
    end else if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd0))) begin
        sum_1_reg_276 <= sum_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_616_p2 == 1'd1))) begin
        sum_reg_253 <= sum_1_reg_276;
    end else if (((exitcond2_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_reg_253 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        colIndex_reg_1083 <= colIndex_fu_644_p2;
        nn_reg_1078 <= nn_fu_628_p2;
        or_cond6_reg_1088 <= or_cond6_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_1_reg_1020 <= d_1_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_994 <= i_1_fu_383_p2;
        i_cast_reg_986[7 : 0] <= i_cast_fu_373_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (or_cond6_reg_1088 == 1'd1))) begin
        image2_sum_reg_1097 <= image2_sum_fu_736_p2;
        mem_addr_2_reg_1102 <= filter6_sum_cast_fu_759_p1;
        tmp_40_reg_1092 <= tmp_40_fu_732_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        isNeg_reg_1170 <= sh_assign_fu_840_p2[32'd8];
        mem_addr_read_reg_1181 <= mem_RDATA;
        sh_assign_1_reg_1175 <= sh_assign_1_fu_863_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_1007 <= j_1_fu_399_p2;
        j_cast_reg_999[8 : 0] <= j_cast_fu_389_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        loc_V_1_reg_1165 <= loc_V_1_fu_833_p1;
        loc_V_reg_1159 <= {{p_Val2_1_fu_819_p1[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
        m_1_reg_1045 <= m_1_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_mem_ARREADY == 1'b0) | (mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        mem_addr_1_read_reg_1114 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        mem_addr_2_read_reg_1134 <= mem_RDATA;
        tmp_12_reg_1129 <= grp_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mem_addr_reg_1035[30 : 0] <= newImage4_sum_cast_fu_487_p1[30 : 0];
        tmp_18_reg_1030[4 : 3] <= tmp_18_fu_474_p3[4 : 3];
        tmp_s_reg_1025[1 : 0] <= tmp_s_fu_443_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_1073 <= n_1_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        sum_2_reg_1149 <= grp_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd0))) begin
        tmp1_reg_1060 <= tmp1_fu_602_p2;
        tmp_1_reg_1055 <= tmp_1_fu_596_p2;
        tmp_33_reg_1050[17 : 6] <= tmp_33_fu_578_p2[17 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_15_reg_1144 <= grp_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_17_cast_reg_976[29 : 0] <= tmp_17_cast_fu_355_p1[29 : 0];
        tmp_18_cast_reg_981[29 : 0] <= tmp_18_cast_fu_369_p1[29 : 0];
        tmp_9_cast_reg_971[29 : 0] <= tmp_9_cast_fu_341_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd1))) begin
        tmp_19_reg_1065 <= tmp_19_fu_612_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_20_cast_reg_1012 <= tmp_20_cast_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        tmp_29_reg_1186 <= tmp_29_fu_965_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_3_reg_1154 <= tmp_3_fu_324_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_43_reg_1119 <= tmp_43_fu_795_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_377_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (or_cond6_reg_1088 == 1'd1))) begin
        ap_phi_mux_sum_1_be_phi_fu_303_p4 = sum_2_reg_1149;
    end else begin
        ap_phi_mux_sum_1_be_phi_fu_303_p4 = sum_1_be_reg_299;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_377_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_WREADY == 1'b0)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_311_p0 = tmp_3_reg_1154;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_311_p0 = sum_1_reg_276;
    end else begin
        grp_fu_311_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_311_p1 = 32'd1056964608;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_311_p1 = tmp_15_reg_1144;
    end else begin
        grp_fu_311_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | ((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        grp_fu_321_ce = 1'b1;
    end else begin
        grp_fu_321_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_ARREADY == 1'b0)) begin
        if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
            mem_ARADDR = mem_addr_2_reg_1102;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            mem_ARADDR = image2_sum_cast_fu_769_p1;
        end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd1))) begin
            mem_ARADDR = mem_addr_reg_1035;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_mem_ARREADY == 1'b0) & (mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_mem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_mem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd1)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_mem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state40))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | (~((ap_sig_ioackin_mem_ARREADY == 1'b0) | (mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | ((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_mem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd1)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state39))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_377_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_431_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_497_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_616_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((or_cond6_reg_1088 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if ((~((ap_sig_ioackin_mem_ARREADY == 1'b0) | (mem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((ap_sig_ioackin_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((ap_sig_ioackin_mem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_mem_ARREADY == 1'b0) & (exitcond1_fu_497_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign colIndex_fu_644_p2 = ($signed(tmp_2_cast_fu_640_p1) + $signed(j_cast_reg_999));

assign d_1_fu_437_p2 = (d_reg_242 + 2'd1);

assign exitcond1_fu_497_p2 = ((m_reg_265 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_431_p2 = ((d_reg_242 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_393_p2 = ((j_reg_231 == 9'd320) ? 1'b1 : 1'b0);

assign exitcond4_fu_377_p2 = ((i_reg_220 == 8'd240) ? 1'b1 : 1'b0);

assign exitcond_fu_616_p2 = ((n_reg_288 == 2'd3) ? 1'b1 : 1'b0);

assign filter6_sum_cast_fu_759_p1 = filter6_sum_fu_754_p2;

assign filter6_sum_fu_754_p2 = (tmp_9_cast_reg_971 + tmp_14_cast_fu_750_p1);

assign grp_fu_317_p1 = mem_addr_2_read_reg_1134;

assign grp_fu_321_p0 = tmp_43_reg_1119;

assign i_1_fu_383_p2 = (i_reg_220 + 8'd1);

assign i_cast_fu_373_p1 = i_reg_220;

assign image2_sum_cast_fu_769_p1 = image2_sum_reg_1097;

assign image2_sum_fu_736_p2 = (tmp_18_cast_reg_981 + tmp_40_cast_fu_728_p1);

assign image_load2_fu_790_p2 = mem_addr_1_read_reg_1114 >> tmp_42_fu_786_p1;

assign isNeg_fu_846_p3 = sh_assign_fu_840_p2[32'd8];

assign j_1_fu_399_p2 = (j_reg_231 + 9'd1);

assign j_cast_fu_389_p1 = j_reg_231;

assign loc_V_1_fu_833_p1 = p_Val2_1_fu_819_p1[22:0];

assign m_1_fu_503_p2 = (m_reg_265 + 2'd1);

assign mm_cast5_fu_515_p1 = mm_fu_509_p2;

assign mm_fu_509_p2 = ($signed(2'd2) - $signed(m_reg_265));

assign n_1_fu_622_p2 = (n_reg_288 + 2'd1);

assign newImage4_sum_cast_fu_487_p1 = newImage4_sum_fu_482_p2;

assign newImage4_sum_fu_482_p2 = (tmp_17_cast_reg_976 + tmp_23_cast_fu_466_p1);

assign nn_cast_fu_680_p1 = nn_reg_1078;

assign nn_fu_628_p2 = ($signed(2'd2) - $signed(n_reg_288));

assign or_cond6_fu_675_p2 = (tmp2_fu_669_p2 & tmp1_reg_1060);

assign p_Result_s_fu_807_p3 = {{1'd0}, {tmp_19_reg_1065}};

assign p_Val2_1_fu_819_p1 = grp_fu_311_p2;

assign p_Val2_4_fu_928_p3 = ((isNeg_reg_1170[0:0] === 1'b1) ? tmp_20_fu_914_p1 : tmp_21_fu_918_p4);

assign p_Val2_s_fu_608_p1 = x_assign_fu_327_p1;

assign p_shl1_cast_fu_562_p1 = $signed(tmp_31_fu_554_p3);

assign p_shl2_cast_fu_574_p1 = $signed(tmp_32_fu_566_p3);

assign p_shl3_fu_703_p1 = $signed(tmp_36_fu_695_p3);

assign p_shl7_cast_fu_417_p1 = tmp_9_fu_409_p3;

assign p_shl_cast_fu_592_p1 = p_shl_fu_584_p3;

assign p_shl_fu_584_p3 = {{mm_fu_509_p2}, {2'd0}};

assign rev1_fu_657_p2 = (tmp_34_fu_649_p3 ^ 1'd1);

assign rev_fu_542_p2 = (tmp_30_fu_534_p3 ^ 1'd1);

assign rowIndex_fu_529_p2 = ($signed(tmp_6_cast_fu_525_p1) + $signed(i_cast_reg_986));

assign sh_assign_1_cast_cas_fu_887_p1 = sh_assign_1_reg_1175;

assign sh_assign_1_cast_fu_884_p1 = sh_assign_1_reg_1175;

assign sh_assign_1_fu_863_p3 = ((isNeg_fu_846_p3[0:0] === 1'b1) ? tmp_5_i_i_i_cast_fu_859_p1 : sh_assign_fu_840_p2);

assign sh_assign_fu_840_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast3_fu_837_p1));

assign tmp1_fu_602_p2 = (tmp_8_fu_548_p2 & rev_fu_542_p2);

assign tmp2_fu_669_p2 = (tmp_5_fu_663_p2 & rev1_fu_657_p2);

assign tmp_10_cast_fu_683_p1 = colIndex_reg_1083;

assign tmp_10_fu_421_p2 = (p_shl7_cast_fu_417_p1 - tmp_cast_fu_405_p1);

assign tmp_13_cast_fu_746_p1 = $signed(tmp_13_fu_741_p2);

assign tmp_13_fu_741_p2 = (tmp_1_reg_1055 + nn_cast_fu_680_p1);

assign tmp_14_cast_fu_750_p1 = $unsigned(tmp_13_cast_fu_746_p1);

assign tmp_14_fu_451_p2 = ($signed(tmp_cast_12_fu_447_p1) + $signed(tmp_20_cast_reg_1012));

assign tmp_16_fu_456_p4 = {{tmp_14_fu_451_p2[9:2]}};

assign tmp_17_cast_fu_355_p1 = tmp_4_fu_345_p4;

assign tmp_17_fu_470_p1 = tmp_14_fu_451_p2[1:0];

assign tmp_18_cast_fu_369_p1 = tmp_7_fu_359_p4;

assign tmp_18_fu_474_p3 = {{tmp_17_fu_470_p1}, {3'd0}};

assign tmp_19_fu_612_p1 = p_Val2_s_fu_608_p1[62:0];

assign tmp_1_fu_596_p2 = (p_shl_cast_fu_592_p1 - mm_cast5_fu_515_p1);

assign tmp_20_cast_fu_427_p1 = $signed(tmp_10_fu_421_p2);

assign tmp_20_fu_914_p1 = tmp_22_fu_906_p3;

assign tmp_21_fu_918_p4 = {{tmp_i_i_i_fu_900_p2[31:24]}};

assign tmp_22_fu_906_p3 = tmp_8_i_i_i_fu_894_p2[32'd24];

assign tmp_23_cast_fu_466_p1 = tmp_16_fu_456_p4;

assign tmp_23_fu_935_p1 = tmp_18_reg_1030;

assign tmp_24_fu_938_p2 = 32'd255 << tmp_23_fu_935_p1;

assign tmp_25_fu_944_p2 = (tmp_24_fu_938_p2 ^ 32'd4294967295);

assign tmp_26_fu_950_p2 = (tmp_25_fu_944_p2 & mem_addr_read_reg_1181);

assign tmp_27_fu_955_p1 = p_Val2_4_fu_928_p3;

assign tmp_28_fu_959_p2 = tmp_27_fu_955_p1 << tmp_23_fu_935_p1;

assign tmp_29_fu_965_p2 = (tmp_28_fu_959_p2 | tmp_26_fu_950_p2);

assign tmp_2_cast_fu_640_p1 = $signed(tmp_2_fu_634_p2);

assign tmp_2_fu_634_p2 = (2'd1 - nn_fu_628_p2);

assign tmp_30_fu_534_p3 = rowIndex_fu_529_p2[32'd8];

assign tmp_31_fu_554_p3 = {{rowIndex_fu_529_p2}, {8'd0}};

assign tmp_32_fu_566_p3 = {{rowIndex_fu_529_p2}, {6'd0}};

assign tmp_33_fu_578_p2 = ($signed(p_shl2_cast_fu_574_p1) + $signed(p_shl1_cast_fu_562_p1));

assign tmp_34_fu_649_p3 = colIndex_fu_644_p2[32'd9];

assign tmp_35_cast_fu_691_p1 = tmp_35_fu_686_p2;

assign tmp_35_fu_686_p2 = (tmp_10_cast_fu_683_p1 + tmp_33_reg_1050);

assign tmp_36_fu_695_p3 = {{tmp_35_fu_686_p2}, {2'd0}};

assign tmp_37_fu_707_p2 = ($signed(p_shl3_fu_703_p1) - $signed(tmp_35_cast_fu_691_p1));

assign tmp_38_fu_713_p2 = (tmp_s_reg_1025 + tmp_37_fu_707_p2);

assign tmp_39_fu_718_p4 = {{tmp_38_fu_713_p2[17:2]}};

assign tmp_3_fu_324_p0 = p_Result_s_fu_807_p3;

assign tmp_3_i_i_i_cast4_fu_880_p1 = tmp_3_i_i_i_fu_871_p4;

assign tmp_3_i_i_i_fu_871_p4 = {{{{1'd1}, {loc_V_1_reg_1165}}}, {1'd0}};

assign tmp_40_cast_fu_728_p1 = tmp_39_fu_718_p4;

assign tmp_40_fu_732_p1 = tmp_38_fu_713_p2[1:0];

assign tmp_41_fu_779_p3 = {{tmp_40_reg_1092}, {3'd0}};

assign tmp_42_fu_786_p1 = tmp_41_fu_779_p3;

assign tmp_43_fu_795_p1 = image_load2_fu_790_p2[7:0];

assign tmp_4_fu_345_p4 = {{newImage[31:2]}};

assign tmp_5_fu_663_p2 = (($signed(colIndex_fu_644_p2) < $signed(10'd320)) ? 1'b1 : 1'b0);

assign tmp_5_i_i_i_cast_fu_859_p1 = $signed(tmp_5_i_i_i_fu_854_p2);

assign tmp_5_i_i_i_fu_854_p2 = (8'd127 - loc_V_reg_1159);

assign tmp_6_cast_fu_525_p1 = $signed(tmp_6_fu_519_p2);

assign tmp_6_fu_519_p2 = (2'd1 - mm_fu_509_p2);

assign tmp_7_fu_359_p4 = {{image_r[31:2]}};

assign tmp_7_i_i_i_fu_890_p1 = $unsigned(sh_assign_1_cast_fu_884_p1);

assign tmp_8_fu_548_p2 = (($signed(rowIndex_fu_529_p2) < $signed(9'd240)) ? 1'b1 : 1'b0);

assign tmp_8_i_i_i_fu_894_p2 = tmp_3_i_i_i_fu_871_p4 >> sh_assign_1_cast_cas_fu_887_p1;

assign tmp_9_cast_fu_341_p1 = tmp_fu_331_p4;

assign tmp_9_fu_409_p3 = {{j_reg_231}, {2'd0}};

assign tmp_cast_12_fu_447_p1 = d_reg_242;

assign tmp_cast_fu_405_p1 = j_reg_231;

assign tmp_fu_331_p4 = {{filter[31:2]}};

assign tmp_i_i_i_fu_900_p2 = tmp_3_i_i_i_cast4_fu_880_p1 << tmp_7_i_i_i_fu_890_p1;

assign tmp_i_i_i_i_cast3_fu_837_p1 = loc_V_reg_1159;

assign tmp_s_fu_443_p1 = d_reg_242;

always @ (posedge ap_clk) begin
    tmp_9_cast_reg_971[32:30] <= 3'b000;
    tmp_17_cast_reg_976[30] <= 1'b0;
    tmp_18_cast_reg_981[30] <= 1'b0;
    i_cast_reg_986[8] <= 1'b0;
    j_cast_reg_999[9] <= 1'b0;
    tmp_s_reg_1025[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    tmp_18_reg_1030[2:0] <= 3'b000;
    mem_addr_reg_1035[31] <= 1'b0;
    tmp_33_reg_1050[5:0] <= 6'b000000;
end

endmodule //conv
