-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=36326881,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=2388,HLS_SYN_LUT=4070,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_140 : STD_LOGIC_VECTOR (9 downto 0) := "0101000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_r : STD_LOGIC_VECTOR (31 downto 0);
    signal newImage : STD_LOGIC_VECTOR (31 downto 0);
    signal filter : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_cast_fu_341_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_cast_reg_971 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_17_cast_fu_355_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_cast_reg_976 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_cast_fu_369_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_cast_reg_981 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast_fu_373_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast_reg_986 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_fu_389_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast_reg_999 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_399_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1007 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_cast_fu_427_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_cast_reg_1012 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_1_fu_437_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_1_reg_1020 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1025 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_474_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_1030 : STD_LOGIC_VECTOR (4 downto 0);
    signal mem_addr_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_503_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_1045 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal tmp_33_fu_578_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_reg_1050 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_596_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_1055 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_612_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_19_reg_1065 : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_fu_622_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_1073 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal nn_fu_628_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal nn_reg_1078 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colIndex_fu_644_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal colIndex_reg_1083 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_cond6_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_1088 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_732_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_reg_1092 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal image2_sum_fu_736_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal image2_sum_reg_1097 : STD_LOGIC_VECTOR (30 downto 0);
    signal mem_addr_2_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_addr_1_read_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_795_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_reg_1119 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_addr_2_read_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_3_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal loc_V_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal loc_V_1_fu_833_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_1165 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_846_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_863_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_1175 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_addr_read_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal i_reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_231 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_reg_242 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_265 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_1_be_phi_fu_303_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal n_reg_288 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_be_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal newImage4_sum_cast_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal filter6_sum_cast_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal image2_sum_cast_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_324_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_331_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_345_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_fu_359_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_409_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_405_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_421_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_12_fu_447_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_fu_451_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_456_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_470_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_cast_fu_466_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal newImage4_sum_fu_482_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mm_fu_509_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_519_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_cast_fu_525_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rowIndex_fu_529_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_fu_534_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_554_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_32_fu_566_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_574_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_562_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_584_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_592_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mm_cast5_fu_515_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_634_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_cast_fu_640_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_649_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_cast_fu_683_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_fu_686_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_36_fu_695_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl3_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_707_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_713_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_718_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_cast_fu_728_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal nn_cast_fu_680_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_cast_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_750_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal filter6_sum_fu_754_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_41_fu_779_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_load2_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_807_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_819_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_cast3_fu_837_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_840_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_i_i_i_fu_854_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_i_cast_fu_859_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_i_i_i_fu_871_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_884_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_887_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i_cast4_fu_880_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_7_i_i_i_fu_890_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_i_i_fu_894_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_22_fu_906_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_fu_900_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_20_fu_914_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_918_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_944_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_928_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_955_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_959_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_ce : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_sitofp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fptrunc_64nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fpext_32ns_6fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        image_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        newImage : OUT STD_LOGIC_VECTOR (31 downto 0);
        filter : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_ctrl_s_axi_U : component conv_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        image_r => image_r,
        newImage => newImage,
        filter => filter);

    conv_mem_m_axi_U : component conv_mem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => mem_addr_reg_1035,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => tmp_29_reg_1186,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_311_p0,
        din1 => grp_fu_311_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_12_reg_1129,
        din1 => grp_fu_317_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_317_p2);

    conv_sitofp_32ns_dEe_U3 : component conv_sitofp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_321_p0,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p1);

    conv_fptrunc_64nseOg_U4 : component conv_fptrunc_64nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_3_fu_324_p0,
        dout => tmp_3_fu_324_p1);

    conv_fpext_32ns_6fYi_U5 : component conv_fpext_32ns_6fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => sum_reg_253,
        dout => x_assign_fu_327_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if (((not(((ap_sig_ioackin_mem_ARREADY = ap_const_logic_0) or (mem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_sig_ioackin_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((mem_RVALID = ap_const_logic_1) and (mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                    if ((ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                    elsif ((mem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                    if ((ap_sig_ioackin_mem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                    elsif ((mem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    d_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d_reg_242 <= ap_const_lv2_0;
            elsif (((mem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                d_reg_242 <= d_1_reg_1020;
            end if; 
        end if;
    end process;

    i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_393_p2 = ap_const_lv1_1))) then 
                i_reg_220 <= i_1_reg_994;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_220 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_231 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_431_p2 = ap_const_lv1_1))) then 
                j_reg_231 <= j_1_reg_1007;
            end if; 
        end if;
    end process;

    m_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_616_p2 = ap_const_lv1_1))) then 
                m_reg_265 <= m_1_reg_1045;
            elsif (((exitcond2_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_reg_265 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                n_reg_288 <= n_1_reg_1073;
            elsif (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then 
                n_reg_288 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_1_be_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond6_reg_1088 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_1_be_reg_299 <= sum_1_reg_276;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (or_cond6_reg_1088 = ap_const_lv1_1))) then 
                sum_1_be_reg_299 <= sum_2_reg_1149;
            end if; 
        end if;
    end process;

    sum_1_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum_1_reg_276 <= ap_phi_mux_sum_1_be_phi_fu_303_p4;
            elsif (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then 
                sum_1_reg_276 <= sum_reg_253;
            end if; 
        end if;
    end process;

    sum_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_616_p2 = ap_const_lv1_1))) then 
                sum_reg_253 <= sum_1_reg_276;
            elsif (((exitcond2_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_reg_253 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                colIndex_reg_1083 <= colIndex_fu_644_p2;
                nn_reg_1078 <= nn_fu_628_p2;
                or_cond6_reg_1088 <= or_cond6_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                d_1_reg_1020 <= d_1_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_994 <= i_1_fu_383_p2;
                    i_cast_reg_986(7 downto 0) <= i_cast_fu_373_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond6_reg_1088 = ap_const_lv1_1))) then
                image2_sum_reg_1097 <= image2_sum_fu_736_p2;
                mem_addr_2_reg_1102 <= filter6_sum_cast_fu_759_p1(32 - 1 downto 0);
                tmp_40_reg_1092 <= tmp_40_fu_732_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                isNeg_reg_1170 <= sh_assign_fu_840_p2(8 downto 8);
                mem_addr_read_reg_1181 <= mem_RDATA;
                sh_assign_1_reg_1175 <= sh_assign_1_fu_863_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_1007 <= j_1_fu_399_p2;
                    j_cast_reg_999(8 downto 0) <= j_cast_fu_389_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                loc_V_1_reg_1165 <= loc_V_1_fu_833_p1;
                loc_V_reg_1159 <= p_Val2_1_fu_819_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                m_1_reg_1045 <= m_1_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_mem_ARREADY = ap_const_logic_0) or (mem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                mem_addr_1_read_reg_1114 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                mem_addr_2_read_reg_1134 <= mem_RDATA;
                tmp_12_reg_1129 <= grp_fu_321_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    mem_addr_reg_1035(30 downto 0) <= newImage4_sum_cast_fu_487_p1(32 - 1 downto 0)(30 downto 0);
                    tmp_18_reg_1030(4 downto 3) <= tmp_18_fu_474_p3(4 downto 3);
                    tmp_s_reg_1025(1 downto 0) <= tmp_s_fu_443_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_1073 <= n_1_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                sum_2_reg_1149 <= grp_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then
                tmp1_reg_1060 <= tmp1_fu_602_p2;
                tmp_1_reg_1055 <= tmp_1_fu_596_p2;
                    tmp_33_reg_1050(17 downto 6) <= tmp_33_fu_578_p2(17 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_15_reg_1144 <= grp_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_17_cast_reg_976(29 downto 0) <= tmp_17_cast_fu_355_p1(29 downto 0);
                    tmp_18_cast_reg_981(29 downto 0) <= tmp_18_cast_fu_369_p1(29 downto 0);
                    tmp_9_cast_reg_971(29 downto 0) <= tmp_9_cast_fu_341_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_1))) then
                tmp_19_reg_1065 <= tmp_19_fu_612_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_20_cast_reg_1012 <= tmp_20_cast_fu_427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_mem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                tmp_29_reg_1186 <= tmp_29_fu_965_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_3_reg_1154 <= tmp_3_fu_324_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_43_reg_1119 <= tmp_43_fu_795_p1;
            end if;
        end if;
    end process;
    tmp_9_cast_reg_971(32 downto 30) <= "000";
    tmp_17_cast_reg_976(30) <= '0';
    tmp_18_cast_reg_981(30) <= '0';
    i_cast_reg_986(8) <= '0';
    j_cast_reg_999(9) <= '0';
    tmp_s_reg_1025(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_1030(2 downto 0) <= "000";
    mem_addr_reg_1035(31) <= '0';
    tmp_33_reg_1050(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond1_fu_497_p2, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state22, mem_RVALID, mem_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_393_p2, ap_CS_fsm_state4, exitcond2_fu_431_p2, ap_sig_ioackin_mem_ARREADY, ap_block_state5_io, ap_CS_fsm_state6, exitcond_fu_616_p2, or_cond6_reg_1088, ap_CS_fsm_state7, ap_sig_ioackin_mem_AWREADY, exitcond4_fu_377_p2, ap_sig_ioackin_mem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_377_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_393_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_431_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_616_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((or_cond6_reg_1088 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_sig_ioackin_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if ((not(((ap_sig_ioackin_mem_ARREADY = ap_const_logic_0) or (mem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_sig_ioackin_mem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_sig_ioackin_mem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((mem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state5_io_assign_proc : process(exitcond1_fu_497_p2, ap_sig_ioackin_mem_ARREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_mem_ARREADY = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_377_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_377_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sum_1_be_phi_fu_303_p4_assign_proc : process(or_cond6_reg_1088, sum_2_reg_1149, ap_CS_fsm_state32, sum_1_be_reg_299)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) and (or_cond6_reg_1088 = ap_const_lv1_1))) then 
            ap_phi_mux_sum_1_be_phi_fu_303_p4 <= sum_2_reg_1149;
        else 
            ap_phi_mux_sum_1_be_phi_fu_303_p4 <= sum_1_be_reg_299;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_377_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_377_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_reg_ioackin_mem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_reg_ioackin_mem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_reg_ioackin_mem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    colIndex_fu_644_p2 <= std_logic_vector(signed(tmp_2_cast_fu_640_p1) + signed(j_cast_reg_999));
    d_1_fu_437_p2 <= std_logic_vector(unsigned(d_reg_242) + unsigned(ap_const_lv2_1));
    exitcond1_fu_497_p2 <= "1" when (m_reg_265 = ap_const_lv2_3) else "0";
    exitcond2_fu_431_p2 <= "1" when (d_reg_242 = ap_const_lv2_3) else "0";
    exitcond3_fu_393_p2 <= "1" when (j_reg_231 = ap_const_lv9_140) else "0";
    exitcond4_fu_377_p2 <= "1" when (i_reg_220 = ap_const_lv8_F0) else "0";
    exitcond_fu_616_p2 <= "1" when (n_reg_288 = ap_const_lv2_3) else "0";
    filter6_sum_cast_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter6_sum_fu_754_p2),64));
    filter6_sum_fu_754_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_971) + unsigned(tmp_14_cast_fu_750_p1));

    grp_fu_311_p0_assign_proc : process(tmp_3_reg_1154, sum_1_reg_276, ap_CS_fsm_state27, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_311_p0 <= tmp_3_reg_1154;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_311_p0 <= sum_1_reg_276;
        else 
            grp_fu_311_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_311_p1_assign_proc : process(tmp_15_reg_1144, ap_CS_fsm_state27, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_311_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_311_p1 <= tmp_15_reg_1144;
        else 
            grp_fu_311_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_317_p1 <= mem_addr_2_read_reg_1134;

    grp_fu_321_ce_assign_proc : process(ap_CS_fsm_state22, mem_RVALID, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_321_ce <= ap_const_logic_1;
        else 
            grp_fu_321_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_321_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_1119),32));
    i_1_fu_383_p2 <= std_logic_vector(unsigned(i_reg_220) + unsigned(ap_const_lv8_1));
    i_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_220),9));
    image2_sum_cast_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image2_sum_reg_1097),64));
    image2_sum_fu_736_p2 <= std_logic_vector(unsigned(tmp_18_cast_reg_981) + unsigned(tmp_40_cast_fu_728_p1));
    image_load2_fu_790_p2 <= std_logic_vector(shift_right(unsigned(mem_addr_1_read_reg_1114),to_integer(unsigned('0' & tmp_42_fu_786_p1(31-1 downto 0)))));
    isNeg_fu_846_p3 <= sh_assign_fu_840_p2(8 downto 8);
    j_1_fu_399_p2 <= std_logic_vector(unsigned(j_reg_231) + unsigned(ap_const_lv9_1));
    j_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_231),10));
    loc_V_1_fu_833_p1 <= p_Val2_1_fu_819_p1(23 - 1 downto 0);
    m_1_fu_503_p2 <= std_logic_vector(unsigned(m_reg_265) + unsigned(ap_const_lv2_1));

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_497_p2, ap_CS_fsm_state8, ap_CS_fsm_state15, mem_RVALID, mem_addr_reg_1035, mem_addr_2_reg_1102, image2_sum_cast_fu_769_p1, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_reg_ioackin_mem_ARREADY = ap_const_logic_0)) then
            if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                mem_ARADDR <= mem_addr_2_reg_1102;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                mem_ARADDR <= image2_sum_cast_fu_769_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_1))) then 
                mem_ARADDR <= mem_addr_reg_1035;
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_497_p2, ap_CS_fsm_state8, ap_CS_fsm_state15, mem_RVALID, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((((ap_reg_ioackin_mem_ARREADY = ap_const_logic_0) and (mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_mem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_mem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_1)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(ap_CS_fsm_state40, ap_reg_ioackin_mem_AWREADY)
    begin
        if (((ap_reg_ioackin_mem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state46, mem_BVALID)
    begin
        if (((mem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state22, mem_RVALID, ap_sig_ioackin_mem_ARREADY)
    begin
        if ((((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((ap_sig_ioackin_mem_ARREADY = ap_const_logic_0) or (mem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state41, ap_reg_ioackin_mem_WREADY)
    begin
        if (((ap_reg_ioackin_mem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state5, exitcond1_fu_497_p2, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_497_p2 = ap_const_lv1_1)))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    mm_cast5_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mm_fu_509_p2),5));
    mm_fu_509_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(m_reg_265));
    n_1_fu_622_p2 <= std_logic_vector(unsigned(n_reg_288) + unsigned(ap_const_lv2_1));
    newImage4_sum_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newImage4_sum_fu_482_p2),64));
    newImage4_sum_fu_482_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_976) + unsigned(tmp_23_cast_fu_466_p1));
    nn_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nn_reg_1078),5));
    nn_fu_628_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(n_reg_288));
    or_cond6_fu_675_p2 <= (tmp2_fu_669_p2 and tmp1_reg_1060);
    p_Result_s_fu_807_p3 <= (ap_const_lv1_0 & tmp_19_reg_1065);
    p_Val2_1_fu_819_p1 <= grp_fu_311_p2;
    p_Val2_4_fu_928_p3 <= 
        tmp_20_fu_914_p1 when (isNeg_reg_1170(0) = '1') else 
        tmp_21_fu_918_p4;
    p_Val2_s_fu_608_p1 <= x_assign_fu_327_p1;
        p_shl1_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_554_p3),18));

        p_shl2_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_566_p3),18));

        p_shl3_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_fu_695_p3),64));

    p_shl7_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_409_p3),12));
    p_shl_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_584_p3),5));
    p_shl_fu_584_p3 <= (mm_fu_509_p2 & ap_const_lv2_0);
    rev1_fu_657_p2 <= (tmp_34_fu_649_p3 xor ap_const_lv1_1);
    rev_fu_542_p2 <= (tmp_30_fu_534_p3 xor ap_const_lv1_1);
    rowIndex_fu_529_p2 <= std_logic_vector(signed(tmp_6_cast_fu_525_p1) + signed(i_cast_reg_986));
        sh_assign_1_cast_cas_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_1175),25));

        sh_assign_1_cast_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_1175),32));

    sh_assign_1_fu_863_p3 <= 
        tmp_5_i_i_i_cast_fu_859_p1 when (isNeg_fu_846_p3(0) = '1') else 
        sh_assign_fu_840_p2;
    sh_assign_fu_840_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast3_fu_837_p1));
    tmp1_fu_602_p2 <= (tmp_8_fu_548_p2 and rev_fu_542_p2);
    tmp2_fu_669_p2 <= (tmp_5_fu_663_p2 and rev1_fu_657_p2);
    tmp_10_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colIndex_reg_1083),18));
    tmp_10_fu_421_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_417_p1) - unsigned(tmp_cast_fu_405_p1));
        tmp_13_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_741_p2),32));

    tmp_13_fu_741_p2 <= std_logic_vector(unsigned(tmp_1_reg_1055) + unsigned(nn_cast_fu_680_p1));
    tmp_14_cast_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_cast_fu_746_p1),33));
    tmp_14_fu_451_p2 <= std_logic_vector(unsigned(tmp_cast_12_fu_447_p1) + unsigned(tmp_20_cast_reg_1012));
    tmp_16_fu_456_p4 <= tmp_14_fu_451_p2(9 downto 2);
    tmp_17_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_345_p4),31));
    tmp_17_fu_470_p1 <= tmp_14_fu_451_p2(2 - 1 downto 0);
    tmp_18_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_359_p4),31));
    tmp_18_fu_474_p3 <= (tmp_17_fu_470_p1 & ap_const_lv3_0);
    tmp_19_fu_612_p1 <= p_Val2_s_fu_608_p1(63 - 1 downto 0);
    tmp_1_fu_596_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_592_p1) - unsigned(mm_cast5_fu_515_p1));
        tmp_20_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_421_p2),13));

    tmp_20_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_906_p3),8));
    tmp_21_fu_918_p4 <= tmp_i_i_i_fu_900_p2(31 downto 24);
    tmp_22_fu_906_p3 <= tmp_8_i_i_i_fu_894_p2(24 downto 24);
    tmp_23_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_456_p4),31));
    tmp_23_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_reg_1030),32));
    tmp_24_fu_938_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FF),to_integer(unsigned('0' & tmp_23_fu_935_p1(31-1 downto 0)))));
    tmp_25_fu_944_p2 <= (tmp_24_fu_938_p2 xor ap_const_lv32_FFFFFFFF);
    tmp_26_fu_950_p2 <= (tmp_25_fu_944_p2 and mem_addr_read_reg_1181);
    tmp_27_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_928_p3),32));
    tmp_28_fu_959_p2 <= std_logic_vector(shift_left(unsigned(tmp_27_fu_955_p1),to_integer(unsigned('0' & tmp_23_fu_935_p1(31-1 downto 0)))));
    tmp_29_fu_965_p2 <= (tmp_28_fu_959_p2 or tmp_26_fu_950_p2);
        tmp_2_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_634_p2),10));

    tmp_2_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) - unsigned(nn_fu_628_p2));
    tmp_30_fu_534_p3 <= rowIndex_fu_529_p2(8 downto 8);
    tmp_31_fu_554_p3 <= (rowIndex_fu_529_p2 & ap_const_lv8_0);
    tmp_32_fu_566_p3 <= (rowIndex_fu_529_p2 & ap_const_lv6_0);
    tmp_33_fu_578_p2 <= std_logic_vector(signed(p_shl2_cast_fu_574_p1) + signed(p_shl1_cast_fu_562_p1));
    tmp_34_fu_649_p3 <= colIndex_fu_644_p2(9 downto 9);
        tmp_35_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_686_p2),64));

    tmp_35_fu_686_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_683_p1) + unsigned(tmp_33_reg_1050));
    tmp_36_fu_695_p3 <= (tmp_35_fu_686_p2 & ap_const_lv2_0);
    tmp_37_fu_707_p2 <= std_logic_vector(signed(p_shl3_fu_703_p1) - signed(tmp_35_cast_fu_691_p1));
    tmp_38_fu_713_p2 <= std_logic_vector(unsigned(tmp_s_reg_1025) + unsigned(tmp_37_fu_707_p2));
    tmp_39_fu_718_p4 <= tmp_38_fu_713_p2(17 downto 2);
    tmp_3_fu_324_p0 <= p_Result_s_fu_807_p3;
    tmp_3_i_i_i_cast4_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i_fu_871_p4),55));
    tmp_3_i_i_i_fu_871_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_1165) & ap_const_lv1_0);
    tmp_40_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_718_p4),31));
    tmp_40_fu_732_p1 <= tmp_38_fu_713_p2(2 - 1 downto 0);
    tmp_41_fu_779_p3 <= (tmp_40_reg_1092 & ap_const_lv3_0);
    tmp_42_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_779_p3),32));
    tmp_43_fu_795_p1 <= image_load2_fu_790_p2(8 - 1 downto 0);
    tmp_4_fu_345_p4 <= newImage(31 downto 2);
    tmp_5_fu_663_p2 <= "1" when (signed(colIndex_fu_644_p2) < signed(ap_const_lv10_140)) else "0";
        tmp_5_i_i_i_cast_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i_fu_854_p2),9));

    tmp_5_i_i_i_fu_854_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_reg_1159));
        tmp_6_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_519_p2),9));

    tmp_6_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) - unsigned(mm_fu_509_p2));
    tmp_7_fu_359_p4 <= image_r(31 downto 2);
    tmp_7_i_i_i_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_884_p1),55));
    tmp_8_fu_548_p2 <= "1" when (signed(rowIndex_fu_529_p2) < signed(ap_const_lv9_F0)) else "0";
    tmp_8_i_i_i_fu_894_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i_fu_871_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_887_p1(25-1 downto 0)))));
    tmp_9_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_331_p4),33));
    tmp_9_fu_409_p3 <= (j_reg_231 & ap_const_lv2_0);
    tmp_cast_12_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_242),13));
    tmp_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_231),12));
    tmp_fu_331_p4 <= filter(31 downto 2);
    tmp_i_i_i_fu_900_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i_cast4_fu_880_p1),to_integer(unsigned('0' & tmp_7_i_i_i_fu_890_p1(31-1 downto 0)))));
    tmp_i_i_i_i_cast3_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_reg_1159),9));
    tmp_s_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_242),64));
end behav;
