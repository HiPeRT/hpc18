

================================================================
== Vivado HLS Report for 'copyMem'
================================================================
* Date:           Fri May 17 15:01:58 2019

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        hls
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.750|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |    ?|    ?|         2|          -|          -|     ?|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 14
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / (!exitcond)
	11  / (exitcond)
10 --> 
	9  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.00>
ST_1 : Operation 15 [1/1] (1.00ns)   --->   "%bytes_read = call i64 @_ssdm_op_Read.s_axilite.i64(i64 %bytes)"   --->   Operation 15 'read' 'bytes_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 16 [1/1] (1.00ns)   --->   "%src_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %src)"   --->   Operation 16 'read' 'src_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 17 [1/1] (1.00ns)   --->   "%dst_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %dst)"   --->   Operation 17 'read' 'dst_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%tmp_1 = sext i32 %src_read to i64"   --->   Operation 18 'sext' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%ddr_addr = getelementptr i8* %ddr, i64 %tmp_1"   --->   Operation 19 'getelementptr' 'ddr_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%tmp_2 = sext i32 %dst_read to i64"   --->   Operation 20 'sext' 'tmp_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%ddr_addr_1 = getelementptr i8* %ddr, i64 %tmp_2"   --->   Operation 21 'getelementptr' 'ddr_addr_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%tmp = trunc i64 %bytes_read to i32"   --->   Operation 22 'trunc' 'tmp' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 8.75>
ST_2 : Operation 23 [7/7] (8.75ns)   --->   "%ddr_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %ddr_addr, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 23 'readreq' 'ddr_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_2 : Operation 24 [1/1] (8.75ns)   --->   "%ddr_addr_1_wr_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %ddr_addr_1, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 24 'writereq' 'ddr_addr_1_wr_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 8.75>
ST_3 : Operation 25 [6/7] (8.75ns)   --->   "%ddr_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %ddr_addr, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 25 'readreq' 'ddr_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 8.75>
ST_4 : Operation 26 [5/7] (8.75ns)   --->   "%ddr_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %ddr_addr, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 26 'readreq' 'ddr_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 8.75>
ST_5 : Operation 27 [4/7] (8.75ns)   --->   "%ddr_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %ddr_addr, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 27 'readreq' 'ddr_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 8.75>
ST_6 : Operation 28 [3/7] (8.75ns)   --->   "%ddr_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %ddr_addr, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 28 'readreq' 'ddr_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 8.75>
ST_7 : Operation 29 [2/7] (8.75ns)   --->   "%ddr_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %ddr_addr, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 29 'readreq' 'ddr_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 8.75>
ST_8 : Operation 30 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %ddr), !map !10"   --->   Operation 30 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 31 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64 %bytes) nounwind, !map !17"   --->   Operation 31 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 32 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([8 x i8]* @copyMem_str) nounwind"   --->   Operation 32 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 33 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %ddr, [6 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [4 x i8]* @p_str2, [6 x i8]* @p_str3, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [hls/copyMem.cpp:6]   --->   Operation 33 'specinterface' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 34 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %dst, [10 x i8]* @mode, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @bundle, [6 x i8]* @p_str3, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [hls/copyMem.cpp:6]   --->   Operation 34 'specinterface' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 35 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %src, [10 x i8]* @mode1, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @bundle2, [6 x i8]* @p_str3, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [hls/copyMem.cpp:7]   --->   Operation 35 'specinterface' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 36 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64 %bytes, [10 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [5 x i8]* @p_str5, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [hls/copyMem.cpp:9]   --->   Operation 36 'specinterface' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 37 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [5 x i8]* @p_str5, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [hls/copyMem.cpp:10]   --->   Operation 37 'specinterface' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 38 [1/7] (8.75ns)   --->   "%ddr_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %ddr_addr, i32 %tmp)" [hls/copyMem.cpp:13]   --->   Operation 38 'readreq' 'ddr_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 39 [1/1] (1.76ns)   --->   "br label %1" [hls/copyMem.cpp:12]   --->   Operation 39 'br' <Predicate = true> <Delay = 1.76>

State 9 <SV = 8> <Delay = 8.75>
ST_9 : Operation 40 [1/1] (0.00ns)   --->   "%i = phi i64 [ 0, %0 ], [ %i_1, %2 ]"   --->   Operation 40 'phi' 'i' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 41 [1/1] (2.77ns)   --->   "%exitcond = icmp eq i64 %i, %bytes_read" [hls/copyMem.cpp:12]   --->   Operation 41 'icmp' 'exitcond' <Predicate = true> <Delay = 2.77> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 42 [1/1] (3.52ns)   --->   "%i_1 = add i64 %i, 1" [hls/copyMem.cpp:12]   --->   Operation 42 'add' 'i_1' <Predicate = true> <Delay = 3.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 43 [1/1] (0.00ns)   --->   "br i1 %exitcond, label %3, label %2" [hls/copyMem.cpp:12]   --->   Operation 43 'br' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 44 [1/1] (8.75ns)   --->   "%ddr_addr_read = call i8 @_ssdm_op_Read.m_axi.i8P(i8* %ddr_addr)" [hls/copyMem.cpp:13]   --->   Operation 44 'read' 'ddr_addr_read' <Predicate = (!exitcond)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 45 [5/5] (8.75ns)   --->   "%ddr_addr_1_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %ddr_addr_1)" [hls/copyMem.cpp:13]   --->   Operation 45 'writeresp' 'ddr_addr_1_wr_resp' <Predicate = (exitcond)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 8.75>
ST_10 : Operation 46 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %ddr_addr_1, i8 %ddr_addr_read, i1 true)" [hls/copyMem.cpp:13]   --->   Operation 46 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 47 [1/1] (0.00ns)   --->   "br label %1" [hls/copyMem.cpp:12]   --->   Operation 47 'br' <Predicate = true> <Delay = 0.00>

State 11 <SV = 9> <Delay = 8.75>
ST_11 : Operation 48 [4/5] (8.75ns)   --->   "%ddr_addr_1_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %ddr_addr_1)" [hls/copyMem.cpp:13]   --->   Operation 48 'writeresp' 'ddr_addr_1_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 10> <Delay = 8.75>
ST_12 : Operation 49 [3/5] (8.75ns)   --->   "%ddr_addr_1_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %ddr_addr_1)" [hls/copyMem.cpp:13]   --->   Operation 49 'writeresp' 'ddr_addr_1_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 11> <Delay = 8.75>
ST_13 : Operation 50 [2/5] (8.75ns)   --->   "%ddr_addr_1_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %ddr_addr_1)" [hls/copyMem.cpp:13]   --->   Operation 50 'writeresp' 'ddr_addr_1_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 12> <Delay = 8.75>
ST_14 : Operation 51 [1/5] (8.75ns)   --->   "%ddr_addr_1_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %ddr_addr_1)" [hls/copyMem.cpp:13]   --->   Operation 51 'writeresp' 'ddr_addr_1_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 52 [1/1] (0.00ns)   --->   "ret void" [hls/copyMem.cpp:15]   --->   Operation 52 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1ns
The critical path consists of the following:
	s_axi read on port 'bytes' [5]  (1 ns)

 <State 2>: 8.75ns
The critical path consists of the following:
	bus request on port 'ddr' (hls/copyMem.cpp:13) [21]  (8.75 ns)

 <State 3>: 8.75ns
The critical path consists of the following:
	bus request on port 'ddr' (hls/copyMem.cpp:13) [21]  (8.75 ns)

 <State 4>: 8.75ns
The critical path consists of the following:
	bus request on port 'ddr' (hls/copyMem.cpp:13) [21]  (8.75 ns)

 <State 5>: 8.75ns
The critical path consists of the following:
	bus request on port 'ddr' (hls/copyMem.cpp:13) [21]  (8.75 ns)

 <State 6>: 8.75ns
The critical path consists of the following:
	bus request on port 'ddr' (hls/copyMem.cpp:13) [21]  (8.75 ns)

 <State 7>: 8.75ns
The critical path consists of the following:
	bus request on port 'ddr' (hls/copyMem.cpp:13) [21]  (8.75 ns)

 <State 8>: 8.75ns
The critical path consists of the following:
	bus request on port 'ddr' (hls/copyMem.cpp:13) [21]  (8.75 ns)

 <State 9>: 8.75ns
The critical path consists of the following:
	bus read on port 'ddr' (hls/copyMem.cpp:13) [30]  (8.75 ns)

 <State 10>: 8.75ns
The critical path consists of the following:
	bus write on port 'ddr' (hls/copyMem.cpp:13) [31]  (8.75 ns)

 <State 11>: 8.75ns
The critical path consists of the following:
	bus access on port 'ddr' (hls/copyMem.cpp:13) [34]  (8.75 ns)

 <State 12>: 8.75ns
The critical path consists of the following:
	bus access on port 'ddr' (hls/copyMem.cpp:13) [34]  (8.75 ns)

 <State 13>: 8.75ns
The critical path consists of the following:
	bus access on port 'ddr' (hls/copyMem.cpp:13) [34]  (8.75 ns)

 <State 14>: 8.75ns
The critical path consists of the following:
	bus access on port 'ddr' (hls/copyMem.cpp:13) [34]  (8.75 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
