// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "copyMem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic copyMem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic copyMem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> copyMem::ap_ST_fsm_state1 = "1";
const sc_lv<14> copyMem::ap_ST_fsm_state2 = "10";
const sc_lv<14> copyMem::ap_ST_fsm_state3 = "100";
const sc_lv<14> copyMem::ap_ST_fsm_state4 = "1000";
const sc_lv<14> copyMem::ap_ST_fsm_state5 = "10000";
const sc_lv<14> copyMem::ap_ST_fsm_state6 = "100000";
const sc_lv<14> copyMem::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> copyMem::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> copyMem::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> copyMem::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> copyMem::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> copyMem::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> copyMem::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> copyMem::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> copyMem::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> copyMem::ap_const_lv32_1 = "1";
const sc_lv<32> copyMem::ap_const_lv32_8 = "1000";
const sc_lv<1> copyMem::ap_const_lv1_0 = "0";
const sc_lv<32> copyMem::ap_const_lv32_9 = "1001";
const sc_lv<32> copyMem::ap_const_lv32_D = "1101";
const int copyMem::C_S_AXI_DATA_WIDTH = "100000";
const int copyMem::C_M_AXI_DDR_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int copyMem::C_M_AXI_DDR_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int copyMem::C_M_AXI_DDR_CACHE_VALUE = "11";
const int copyMem::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<64> copyMem::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> copyMem::ap_const_lv32_7 = "111";
const bool copyMem::ap_const_boolean_0 = false;
const sc_lv<3> copyMem::ap_const_lv3_0 = "000";
const sc_lv<2> copyMem::ap_const_lv2_0 = "00";
const sc_lv<4> copyMem::ap_const_lv4_0 = "0000";
const sc_lv<1> copyMem::ap_const_lv1_1 = "1";
const sc_lv<64> copyMem::ap_const_lv64_1 = "1";
const bool copyMem::ap_const_boolean_1 = true;

copyMem::copyMem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    copyMem_ctrl_s_axi_U = new copyMem_ctrl_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("copyMem_ctrl_s_axi_U");
    copyMem_ctrl_s_axi_U->AWVALID(s_axi_ctrl_AWVALID);
    copyMem_ctrl_s_axi_U->AWREADY(s_axi_ctrl_AWREADY);
    copyMem_ctrl_s_axi_U->AWADDR(s_axi_ctrl_AWADDR);
    copyMem_ctrl_s_axi_U->WVALID(s_axi_ctrl_WVALID);
    copyMem_ctrl_s_axi_U->WREADY(s_axi_ctrl_WREADY);
    copyMem_ctrl_s_axi_U->WDATA(s_axi_ctrl_WDATA);
    copyMem_ctrl_s_axi_U->WSTRB(s_axi_ctrl_WSTRB);
    copyMem_ctrl_s_axi_U->ARVALID(s_axi_ctrl_ARVALID);
    copyMem_ctrl_s_axi_U->ARREADY(s_axi_ctrl_ARREADY);
    copyMem_ctrl_s_axi_U->ARADDR(s_axi_ctrl_ARADDR);
    copyMem_ctrl_s_axi_U->RVALID(s_axi_ctrl_RVALID);
    copyMem_ctrl_s_axi_U->RREADY(s_axi_ctrl_RREADY);
    copyMem_ctrl_s_axi_U->RDATA(s_axi_ctrl_RDATA);
    copyMem_ctrl_s_axi_U->RRESP(s_axi_ctrl_RRESP);
    copyMem_ctrl_s_axi_U->BVALID(s_axi_ctrl_BVALID);
    copyMem_ctrl_s_axi_U->BREADY(s_axi_ctrl_BREADY);
    copyMem_ctrl_s_axi_U->BRESP(s_axi_ctrl_BRESP);
    copyMem_ctrl_s_axi_U->ACLK(ap_clk);
    copyMem_ctrl_s_axi_U->ARESET(ap_rst_n_inv);
    copyMem_ctrl_s_axi_U->ACLK_EN(ap_var_for_const0);
    copyMem_ctrl_s_axi_U->ap_start(ap_start);
    copyMem_ctrl_s_axi_U->interrupt(interrupt);
    copyMem_ctrl_s_axi_U->ap_ready(ap_ready);
    copyMem_ctrl_s_axi_U->ap_done(ap_done);
    copyMem_ctrl_s_axi_U->ap_idle(ap_idle);
    copyMem_ctrl_s_axi_U->dst(dst);
    copyMem_ctrl_s_axi_U->src(src);
    copyMem_ctrl_s_axi_U->bytes(bytes);
    copyMem_ddr_m_axi_U = new copyMem_ddr_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_DDR_ID_WIDTH,C_M_AXI_DDR_ADDR_WIDTH,C_M_AXI_DDR_DATA_WIDTH,C_M_AXI_DDR_AWUSER_WIDTH,C_M_AXI_DDR_ARUSER_WIDTH,C_M_AXI_DDR_WUSER_WIDTH,C_M_AXI_DDR_RUSER_WIDTH,C_M_AXI_DDR_BUSER_WIDTH,C_M_AXI_DDR_USER_VALUE,C_M_AXI_DDR_PROT_VALUE,C_M_AXI_DDR_CACHE_VALUE>("copyMem_ddr_m_axi_U");
    copyMem_ddr_m_axi_U->AWVALID(m_axi_ddr_AWVALID);
    copyMem_ddr_m_axi_U->AWREADY(m_axi_ddr_AWREADY);
    copyMem_ddr_m_axi_U->AWADDR(m_axi_ddr_AWADDR);
    copyMem_ddr_m_axi_U->AWID(m_axi_ddr_AWID);
    copyMem_ddr_m_axi_U->AWLEN(m_axi_ddr_AWLEN);
    copyMem_ddr_m_axi_U->AWSIZE(m_axi_ddr_AWSIZE);
    copyMem_ddr_m_axi_U->AWBURST(m_axi_ddr_AWBURST);
    copyMem_ddr_m_axi_U->AWLOCK(m_axi_ddr_AWLOCK);
    copyMem_ddr_m_axi_U->AWCACHE(m_axi_ddr_AWCACHE);
    copyMem_ddr_m_axi_U->AWPROT(m_axi_ddr_AWPROT);
    copyMem_ddr_m_axi_U->AWQOS(m_axi_ddr_AWQOS);
    copyMem_ddr_m_axi_U->AWREGION(m_axi_ddr_AWREGION);
    copyMem_ddr_m_axi_U->AWUSER(m_axi_ddr_AWUSER);
    copyMem_ddr_m_axi_U->WVALID(m_axi_ddr_WVALID);
    copyMem_ddr_m_axi_U->WREADY(m_axi_ddr_WREADY);
    copyMem_ddr_m_axi_U->WDATA(m_axi_ddr_WDATA);
    copyMem_ddr_m_axi_U->WSTRB(m_axi_ddr_WSTRB);
    copyMem_ddr_m_axi_U->WLAST(m_axi_ddr_WLAST);
    copyMem_ddr_m_axi_U->WID(m_axi_ddr_WID);
    copyMem_ddr_m_axi_U->WUSER(m_axi_ddr_WUSER);
    copyMem_ddr_m_axi_U->ARVALID(m_axi_ddr_ARVALID);
    copyMem_ddr_m_axi_U->ARREADY(m_axi_ddr_ARREADY);
    copyMem_ddr_m_axi_U->ARADDR(m_axi_ddr_ARADDR);
    copyMem_ddr_m_axi_U->ARID(m_axi_ddr_ARID);
    copyMem_ddr_m_axi_U->ARLEN(m_axi_ddr_ARLEN);
    copyMem_ddr_m_axi_U->ARSIZE(m_axi_ddr_ARSIZE);
    copyMem_ddr_m_axi_U->ARBURST(m_axi_ddr_ARBURST);
    copyMem_ddr_m_axi_U->ARLOCK(m_axi_ddr_ARLOCK);
    copyMem_ddr_m_axi_U->ARCACHE(m_axi_ddr_ARCACHE);
    copyMem_ddr_m_axi_U->ARPROT(m_axi_ddr_ARPROT);
    copyMem_ddr_m_axi_U->ARQOS(m_axi_ddr_ARQOS);
    copyMem_ddr_m_axi_U->ARREGION(m_axi_ddr_ARREGION);
    copyMem_ddr_m_axi_U->ARUSER(m_axi_ddr_ARUSER);
    copyMem_ddr_m_axi_U->RVALID(m_axi_ddr_RVALID);
    copyMem_ddr_m_axi_U->RREADY(m_axi_ddr_RREADY);
    copyMem_ddr_m_axi_U->RDATA(m_axi_ddr_RDATA);
    copyMem_ddr_m_axi_U->RLAST(m_axi_ddr_RLAST);
    copyMem_ddr_m_axi_U->RID(m_axi_ddr_RID);
    copyMem_ddr_m_axi_U->RUSER(m_axi_ddr_RUSER);
    copyMem_ddr_m_axi_U->RRESP(m_axi_ddr_RRESP);
    copyMem_ddr_m_axi_U->BVALID(m_axi_ddr_BVALID);
    copyMem_ddr_m_axi_U->BREADY(m_axi_ddr_BREADY);
    copyMem_ddr_m_axi_U->BRESP(m_axi_ddr_BRESP);
    copyMem_ddr_m_axi_U->BID(m_axi_ddr_BID);
    copyMem_ddr_m_axi_U->BUSER(m_axi_ddr_BUSER);
    copyMem_ddr_m_axi_U->ACLK(ap_clk);
    copyMem_ddr_m_axi_U->ARESET(ap_rst_n_inv);
    copyMem_ddr_m_axi_U->ACLK_EN(ap_var_for_const0);
    copyMem_ddr_m_axi_U->I_ARVALID(ddr_ARVALID);
    copyMem_ddr_m_axi_U->I_ARREADY(ddr_ARREADY);
    copyMem_ddr_m_axi_U->I_ARADDR(ddr_addr_reg_155);
    copyMem_ddr_m_axi_U->I_ARID(ap_var_for_const1);
    copyMem_ddr_m_axi_U->I_ARLEN(tmp_reg_167);
    copyMem_ddr_m_axi_U->I_ARSIZE(ap_var_for_const2);
    copyMem_ddr_m_axi_U->I_ARLOCK(ap_var_for_const3);
    copyMem_ddr_m_axi_U->I_ARCACHE(ap_var_for_const4);
    copyMem_ddr_m_axi_U->I_ARQOS(ap_var_for_const4);
    copyMem_ddr_m_axi_U->I_ARPROT(ap_var_for_const2);
    copyMem_ddr_m_axi_U->I_ARUSER(ap_var_for_const1);
    copyMem_ddr_m_axi_U->I_ARBURST(ap_var_for_const3);
    copyMem_ddr_m_axi_U->I_ARREGION(ap_var_for_const4);
    copyMem_ddr_m_axi_U->I_RVALID(ddr_RVALID);
    copyMem_ddr_m_axi_U->I_RREADY(ddr_RREADY);
    copyMem_ddr_m_axi_U->I_RDATA(ddr_RDATA);
    copyMem_ddr_m_axi_U->I_RID(ddr_RID);
    copyMem_ddr_m_axi_U->I_RUSER(ddr_RUSER);
    copyMem_ddr_m_axi_U->I_RRESP(ddr_RRESP);
    copyMem_ddr_m_axi_U->I_RLAST(ddr_RLAST);
    copyMem_ddr_m_axi_U->I_AWVALID(ddr_AWVALID);
    copyMem_ddr_m_axi_U->I_AWREADY(ddr_AWREADY);
    copyMem_ddr_m_axi_U->I_AWADDR(ddr_addr_1_reg_161);
    copyMem_ddr_m_axi_U->I_AWID(ap_var_for_const1);
    copyMem_ddr_m_axi_U->I_AWLEN(tmp_reg_167);
    copyMem_ddr_m_axi_U->I_AWSIZE(ap_var_for_const2);
    copyMem_ddr_m_axi_U->I_AWLOCK(ap_var_for_const3);
    copyMem_ddr_m_axi_U->I_AWCACHE(ap_var_for_const4);
    copyMem_ddr_m_axi_U->I_AWQOS(ap_var_for_const4);
    copyMem_ddr_m_axi_U->I_AWPROT(ap_var_for_const2);
    copyMem_ddr_m_axi_U->I_AWUSER(ap_var_for_const1);
    copyMem_ddr_m_axi_U->I_AWBURST(ap_var_for_const3);
    copyMem_ddr_m_axi_U->I_AWREGION(ap_var_for_const4);
    copyMem_ddr_m_axi_U->I_WVALID(ddr_WVALID);
    copyMem_ddr_m_axi_U->I_WREADY(ddr_WREADY);
    copyMem_ddr_m_axi_U->I_WDATA(ddr_addr_read_reg_181);
    copyMem_ddr_m_axi_U->I_WID(ap_var_for_const1);
    copyMem_ddr_m_axi_U->I_WUSER(ap_var_for_const1);
    copyMem_ddr_m_axi_U->I_WLAST(ap_var_for_const5);
    copyMem_ddr_m_axi_U->I_WSTRB(ap_var_for_const6);
    copyMem_ddr_m_axi_U->I_BVALID(ddr_BVALID);
    copyMem_ddr_m_axi_U->I_BREADY(ddr_BREADY);
    copyMem_ddr_m_axi_U->I_BRESP(ddr_BRESP);
    copyMem_ddr_m_axi_U->I_BID(ddr_BID);
    copyMem_ddr_m_axi_U->I_BUSER(ddr_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_sig_ioackin_ddr_ARREADY );
    sensitive << ( ap_sig_ioackin_ddr_AWREADY );

    SC_METHOD(thread_ap_block_state9);
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( ddr_RVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ddr_BVALID );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ddr_BVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_ddr_ARREADY);
    sensitive << ( ddr_ARREADY );
    sensitive << ( ap_reg_ioackin_ddr_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_ddr_AWREADY);
    sensitive << ( ddr_AWREADY );
    sensitive << ( ap_reg_ioackin_ddr_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_ddr_WREADY);
    sensitive << ( ddr_WREADY );
    sensitive << ( ap_reg_ioackin_ddr_WREADY );

    SC_METHOD(thread_ddr_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_ddr_ARREADY );

    SC_METHOD(thread_ddr_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_ddr_AWREADY );

    SC_METHOD(thread_ddr_BREADY);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ddr_BVALID );

    SC_METHOD(thread_ddr_RREADY);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( ddr_RVALID );

    SC_METHOD(thread_ddr_WVALID);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_reg_ioackin_ddr_WREADY );

    SC_METHOD(thread_ddr_blk_n_AR);
    sensitive << ( m_axi_ddr_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ddr_blk_n_AW);
    sensitive << ( m_axi_ddr_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ddr_blk_n_B);
    sensitive << ( m_axi_ddr_BVALID );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ddr_blk_n_R);
    sensitive << ( m_axi_ddr_RVALID );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_139_p2 );

    SC_METHOD(thread_ddr_blk_n_W);
    sensitive << ( m_axi_ddr_WREADY );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_exitcond_fu_139_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( ddr_RVALID );
    sensitive << ( bytes_read_reg_150 );
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_i_1_fu_144_p2);
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_tmp_1_fu_115_p1);
    sensitive << ( src );

    SC_METHOD(thread_tmp_2_fu_125_p1);
    sensitive << ( dst );

    SC_METHOD(thread_tmp_fu_135_p1);
    sensitive << ( bytes );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ddr_RVALID );
    sensitive << ( ddr_BVALID );
    sensitive << ( ap_sig_ioackin_ddr_WREADY );
    sensitive << ( ap_block_state2_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    ap_CS_fsm = "00000000000001";
    ap_reg_ioackin_ddr_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_ddr_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_ddr_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "copyMem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_ddr_AWVALID, "(port)m_axi_ddr_AWVALID");
    sc_trace(mVcdFile, m_axi_ddr_AWREADY, "(port)m_axi_ddr_AWREADY");
    sc_trace(mVcdFile, m_axi_ddr_AWADDR, "(port)m_axi_ddr_AWADDR");
    sc_trace(mVcdFile, m_axi_ddr_AWID, "(port)m_axi_ddr_AWID");
    sc_trace(mVcdFile, m_axi_ddr_AWLEN, "(port)m_axi_ddr_AWLEN");
    sc_trace(mVcdFile, m_axi_ddr_AWSIZE, "(port)m_axi_ddr_AWSIZE");
    sc_trace(mVcdFile, m_axi_ddr_AWBURST, "(port)m_axi_ddr_AWBURST");
    sc_trace(mVcdFile, m_axi_ddr_AWLOCK, "(port)m_axi_ddr_AWLOCK");
    sc_trace(mVcdFile, m_axi_ddr_AWCACHE, "(port)m_axi_ddr_AWCACHE");
    sc_trace(mVcdFile, m_axi_ddr_AWPROT, "(port)m_axi_ddr_AWPROT");
    sc_trace(mVcdFile, m_axi_ddr_AWQOS, "(port)m_axi_ddr_AWQOS");
    sc_trace(mVcdFile, m_axi_ddr_AWREGION, "(port)m_axi_ddr_AWREGION");
    sc_trace(mVcdFile, m_axi_ddr_AWUSER, "(port)m_axi_ddr_AWUSER");
    sc_trace(mVcdFile, m_axi_ddr_WVALID, "(port)m_axi_ddr_WVALID");
    sc_trace(mVcdFile, m_axi_ddr_WREADY, "(port)m_axi_ddr_WREADY");
    sc_trace(mVcdFile, m_axi_ddr_WDATA, "(port)m_axi_ddr_WDATA");
    sc_trace(mVcdFile, m_axi_ddr_WSTRB, "(port)m_axi_ddr_WSTRB");
    sc_trace(mVcdFile, m_axi_ddr_WLAST, "(port)m_axi_ddr_WLAST");
    sc_trace(mVcdFile, m_axi_ddr_WID, "(port)m_axi_ddr_WID");
    sc_trace(mVcdFile, m_axi_ddr_WUSER, "(port)m_axi_ddr_WUSER");
    sc_trace(mVcdFile, m_axi_ddr_ARVALID, "(port)m_axi_ddr_ARVALID");
    sc_trace(mVcdFile, m_axi_ddr_ARREADY, "(port)m_axi_ddr_ARREADY");
    sc_trace(mVcdFile, m_axi_ddr_ARADDR, "(port)m_axi_ddr_ARADDR");
    sc_trace(mVcdFile, m_axi_ddr_ARID, "(port)m_axi_ddr_ARID");
    sc_trace(mVcdFile, m_axi_ddr_ARLEN, "(port)m_axi_ddr_ARLEN");
    sc_trace(mVcdFile, m_axi_ddr_ARSIZE, "(port)m_axi_ddr_ARSIZE");
    sc_trace(mVcdFile, m_axi_ddr_ARBURST, "(port)m_axi_ddr_ARBURST");
    sc_trace(mVcdFile, m_axi_ddr_ARLOCK, "(port)m_axi_ddr_ARLOCK");
    sc_trace(mVcdFile, m_axi_ddr_ARCACHE, "(port)m_axi_ddr_ARCACHE");
    sc_trace(mVcdFile, m_axi_ddr_ARPROT, "(port)m_axi_ddr_ARPROT");
    sc_trace(mVcdFile, m_axi_ddr_ARQOS, "(port)m_axi_ddr_ARQOS");
    sc_trace(mVcdFile, m_axi_ddr_ARREGION, "(port)m_axi_ddr_ARREGION");
    sc_trace(mVcdFile, m_axi_ddr_ARUSER, "(port)m_axi_ddr_ARUSER");
    sc_trace(mVcdFile, m_axi_ddr_RVALID, "(port)m_axi_ddr_RVALID");
    sc_trace(mVcdFile, m_axi_ddr_RREADY, "(port)m_axi_ddr_RREADY");
    sc_trace(mVcdFile, m_axi_ddr_RDATA, "(port)m_axi_ddr_RDATA");
    sc_trace(mVcdFile, m_axi_ddr_RLAST, "(port)m_axi_ddr_RLAST");
    sc_trace(mVcdFile, m_axi_ddr_RID, "(port)m_axi_ddr_RID");
    sc_trace(mVcdFile, m_axi_ddr_RUSER, "(port)m_axi_ddr_RUSER");
    sc_trace(mVcdFile, m_axi_ddr_RRESP, "(port)m_axi_ddr_RRESP");
    sc_trace(mVcdFile, m_axi_ddr_BVALID, "(port)m_axi_ddr_BVALID");
    sc_trace(mVcdFile, m_axi_ddr_BREADY, "(port)m_axi_ddr_BREADY");
    sc_trace(mVcdFile, m_axi_ddr_BRESP, "(port)m_axi_ddr_BRESP");
    sc_trace(mVcdFile, m_axi_ddr_BID, "(port)m_axi_ddr_BID");
    sc_trace(mVcdFile, m_axi_ddr_BUSER, "(port)m_axi_ddr_BUSER");
    sc_trace(mVcdFile, s_axi_ctrl_AWVALID, "(port)s_axi_ctrl_AWVALID");
    sc_trace(mVcdFile, s_axi_ctrl_AWREADY, "(port)s_axi_ctrl_AWREADY");
    sc_trace(mVcdFile, s_axi_ctrl_AWADDR, "(port)s_axi_ctrl_AWADDR");
    sc_trace(mVcdFile, s_axi_ctrl_WVALID, "(port)s_axi_ctrl_WVALID");
    sc_trace(mVcdFile, s_axi_ctrl_WREADY, "(port)s_axi_ctrl_WREADY");
    sc_trace(mVcdFile, s_axi_ctrl_WDATA, "(port)s_axi_ctrl_WDATA");
    sc_trace(mVcdFile, s_axi_ctrl_WSTRB, "(port)s_axi_ctrl_WSTRB");
    sc_trace(mVcdFile, s_axi_ctrl_ARVALID, "(port)s_axi_ctrl_ARVALID");
    sc_trace(mVcdFile, s_axi_ctrl_ARREADY, "(port)s_axi_ctrl_ARREADY");
    sc_trace(mVcdFile, s_axi_ctrl_ARADDR, "(port)s_axi_ctrl_ARADDR");
    sc_trace(mVcdFile, s_axi_ctrl_RVALID, "(port)s_axi_ctrl_RVALID");
    sc_trace(mVcdFile, s_axi_ctrl_RREADY, "(port)s_axi_ctrl_RREADY");
    sc_trace(mVcdFile, s_axi_ctrl_RDATA, "(port)s_axi_ctrl_RDATA");
    sc_trace(mVcdFile, s_axi_ctrl_RRESP, "(port)s_axi_ctrl_RRESP");
    sc_trace(mVcdFile, s_axi_ctrl_BVALID, "(port)s_axi_ctrl_BVALID");
    sc_trace(mVcdFile, s_axi_ctrl_BREADY, "(port)s_axi_ctrl_BREADY");
    sc_trace(mVcdFile, s_axi_ctrl_BRESP, "(port)s_axi_ctrl_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, dst, "dst");
    sc_trace(mVcdFile, src, "src");
    sc_trace(mVcdFile, bytes, "bytes");
    sc_trace(mVcdFile, ddr_blk_n_AR, "ddr_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ddr_blk_n_R, "ddr_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, exitcond_fu_139_p2, "exitcond_fu_139_p2");
    sc_trace(mVcdFile, ddr_blk_n_AW, "ddr_blk_n_AW");
    sc_trace(mVcdFile, ddr_blk_n_W, "ddr_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ddr_blk_n_B, "ddr_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ddr_AWVALID, "ddr_AWVALID");
    sc_trace(mVcdFile, ddr_AWREADY, "ddr_AWREADY");
    sc_trace(mVcdFile, ddr_WVALID, "ddr_WVALID");
    sc_trace(mVcdFile, ddr_WREADY, "ddr_WREADY");
    sc_trace(mVcdFile, ddr_ARVALID, "ddr_ARVALID");
    sc_trace(mVcdFile, ddr_ARREADY, "ddr_ARREADY");
    sc_trace(mVcdFile, ddr_RVALID, "ddr_RVALID");
    sc_trace(mVcdFile, ddr_RREADY, "ddr_RREADY");
    sc_trace(mVcdFile, ddr_RDATA, "ddr_RDATA");
    sc_trace(mVcdFile, ddr_RLAST, "ddr_RLAST");
    sc_trace(mVcdFile, ddr_RID, "ddr_RID");
    sc_trace(mVcdFile, ddr_RUSER, "ddr_RUSER");
    sc_trace(mVcdFile, ddr_RRESP, "ddr_RRESP");
    sc_trace(mVcdFile, ddr_BVALID, "ddr_BVALID");
    sc_trace(mVcdFile, ddr_BREADY, "ddr_BREADY");
    sc_trace(mVcdFile, ddr_BRESP, "ddr_BRESP");
    sc_trace(mVcdFile, ddr_BID, "ddr_BID");
    sc_trace(mVcdFile, ddr_BUSER, "ddr_BUSER");
    sc_trace(mVcdFile, bytes_read_reg_150, "bytes_read_reg_150");
    sc_trace(mVcdFile, ddr_addr_reg_155, "ddr_addr_reg_155");
    sc_trace(mVcdFile, ddr_addr_1_reg_161, "ddr_addr_1_reg_161");
    sc_trace(mVcdFile, tmp_fu_135_p1, "tmp_fu_135_p1");
    sc_trace(mVcdFile, tmp_reg_167, "tmp_reg_167");
    sc_trace(mVcdFile, i_1_fu_144_p2, "i_1_fu_144_p2");
    sc_trace(mVcdFile, i_1_reg_176, "i_1_reg_176");
    sc_trace(mVcdFile, ap_block_state9, "ap_block_state9");
    sc_trace(mVcdFile, ddr_addr_read_reg_181, "ddr_addr_read_reg_181");
    sc_trace(mVcdFile, i_reg_104, "i_reg_104");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_sig_ioackin_ddr_WREADY, "ap_sig_ioackin_ddr_WREADY");
    sc_trace(mVcdFile, tmp_1_fu_115_p1, "tmp_1_fu_115_p1");
    sc_trace(mVcdFile, tmp_2_fu_125_p1, "tmp_2_fu_125_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_ddr_ARREADY, "ap_reg_ioackin_ddr_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_ddr_ARREADY, "ap_sig_ioackin_ddr_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_ddr_AWREADY, "ap_sig_ioackin_ddr_AWREADY");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_reg_ioackin_ddr_AWREADY, "ap_reg_ioackin_ddr_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_ddr_WREADY, "ap_reg_ioackin_ddr_WREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("copyMem.hdltvin.dat");
    mHdltvoutHandle.open("copyMem.hdltvout.dat");
}

copyMem::~copyMem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete copyMem_ctrl_s_axi_U;
    delete copyMem_ddr_m_axi_U;
}

void copyMem::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void copyMem::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void copyMem::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void copyMem::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void copyMem::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void copyMem::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void copyMem::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv1_1;
}

void copyMem::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_ddr_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read())) {
                ap_reg_ioackin_ddr_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ddr_ARREADY.read())) {
                ap_reg_ioackin_ddr_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_ddr_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read())) {
                ap_reg_ioackin_ddr_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ddr_AWREADY.read())) {
                ap_reg_ioackin_ddr_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_ddr_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_ddr_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_ddr_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ddr_WREADY.read())) {
                ap_reg_ioackin_ddr_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_sig_ioackin_ddr_WREADY.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        i_reg_104 = i_1_reg_176.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_reg_104 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        bytes_read_reg_150 = bytes.read();
        ddr_addr_1_reg_161 =  (sc_lv<32>) (tmp_2_fu_125_p1.read());
        ddr_addr_reg_155 =  (sc_lv<32>) (tmp_1_fu_115_p1.read());
        tmp_reg_167 = tmp_fu_135_p1.read();
    }
    if ((!(esl_seteq<1,1,1>(ddr_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0))) {
        ddr_addr_read_reg_181 = ddr_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(ddr_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0)))) {
        i_1_reg_176 = i_1_fu_144_p2.read();
    }
}

void copyMem::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void copyMem::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void copyMem::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void copyMem::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void copyMem::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void copyMem::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void copyMem::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_ddr_AWREADY.read()));
}

void copyMem::thread_ap_block_state9() {
    ap_block_state9 = (esl_seteq<1,1,1>(ddr_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0));
}

void copyMem::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ddr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void copyMem::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void copyMem::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ddr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void copyMem::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void copyMem::thread_ap_sig_ioackin_ddr_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_ARREADY.read())) {
        ap_sig_ioackin_ddr_ARREADY = ddr_ARREADY.read();
    } else {
        ap_sig_ioackin_ddr_ARREADY = ap_const_logic_1;
    }
}

void copyMem::thread_ap_sig_ioackin_ddr_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_AWREADY.read())) {
        ap_sig_ioackin_ddr_AWREADY = ddr_AWREADY.read();
    } else {
        ap_sig_ioackin_ddr_AWREADY = ap_const_logic_1;
    }
}

void copyMem::thread_ap_sig_ioackin_ddr_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_WREADY.read())) {
        ap_sig_ioackin_ddr_WREADY = ddr_WREADY.read();
    } else {
        ap_sig_ioackin_ddr_WREADY = ap_const_logic_1;
    }
}

void copyMem::thread_ddr_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_ARREADY.read()))) {
        ddr_ARVALID = ap_const_logic_1;
    } else {
        ddr_ARVALID = ap_const_logic_0;
    }
}

void copyMem::thread_ddr_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_AWREADY.read()))) {
        ddr_AWVALID = ap_const_logic_1;
    } else {
        ddr_AWVALID = ap_const_logic_0;
    }
}

void copyMem::thread_ddr_BREADY() {
    if ((esl_seteq<1,1,1>(ddr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        ddr_BREADY = ap_const_logic_1;
    } else {
        ddr_BREADY = ap_const_logic_0;
    }
}

void copyMem::thread_ddr_RREADY() {
    if ((!(esl_seteq<1,1,1>(ddr_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0))) {
        ddr_RREADY = ap_const_logic_1;
    } else {
        ddr_RREADY = ap_const_logic_0;
    }
}

void copyMem::thread_ddr_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_ddr_WREADY.read()))) {
        ddr_WVALID = ap_const_logic_1;
    } else {
        ddr_WVALID = ap_const_logic_0;
    }
}

void copyMem::thread_ddr_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ddr_blk_n_AR = m_axi_ddr_ARREADY.read();
    } else {
        ddr_blk_n_AR = ap_const_logic_1;
    }
}

void copyMem::thread_ddr_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ddr_blk_n_AW = m_axi_ddr_AWREADY.read();
    } else {
        ddr_blk_n_AW = ap_const_logic_1;
    }
}

void copyMem::thread_ddr_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ddr_blk_n_B = m_axi_ddr_BVALID.read();
    } else {
        ddr_blk_n_B = ap_const_logic_1;
    }
}

void copyMem::thread_ddr_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0))) {
        ddr_blk_n_R = m_axi_ddr_RVALID.read();
    } else {
        ddr_blk_n_R = ap_const_logic_1;
    }
}

void copyMem::thread_ddr_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ddr_blk_n_W = m_axi_ddr_WREADY.read();
    } else {
        ddr_blk_n_W = ap_const_logic_1;
    }
}

void copyMem::thread_exitcond_fu_139_p2() {
    exitcond_fu_139_p2 = (!i_reg_104.read().is_01() || !bytes_read_reg_150.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_104.read() == bytes_read_reg_150.read());
}

void copyMem::thread_i_1_fu_144_p2() {
    i_1_fu_144_p2 = (!i_reg_104.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(i_reg_104.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void copyMem::thread_tmp_1_fu_115_p1() {
    tmp_1_fu_115_p1 = esl_sext<64,32>(src.read());
}

void copyMem::thread_tmp_2_fu_125_p1() {
    tmp_2_fu_125_p1 = esl_sext<64,32>(dst.read());
}

void copyMem::thread_tmp_fu_135_p1() {
    tmp_fu_135_p1 = bytes.read().range(32-1, 0);
}

void copyMem::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ddr_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else if ((!(esl_seteq<1,1,1>(ddr_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_ddr_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ddr_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXX";
            break;
    }
}

void copyMem::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_ddr_AWVALID\" :  \"" << m_axi_ddr_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_AWREADY\" :  \"" << m_axi_ddr_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWADDR\" :  \"" << m_axi_ddr_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWID\" :  \"" << m_axi_ddr_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWLEN\" :  \"" << m_axi_ddr_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWSIZE\" :  \"" << m_axi_ddr_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWBURST\" :  \"" << m_axi_ddr_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWLOCK\" :  \"" << m_axi_ddr_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWCACHE\" :  \"" << m_axi_ddr_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWPROT\" :  \"" << m_axi_ddr_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWQOS\" :  \"" << m_axi_ddr_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWREGION\" :  \"" << m_axi_ddr_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_AWUSER\" :  \"" << m_axi_ddr_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_WVALID\" :  \"" << m_axi_ddr_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_WREADY\" :  \"" << m_axi_ddr_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_WDATA\" :  \"" << m_axi_ddr_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_WSTRB\" :  \"" << m_axi_ddr_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_WLAST\" :  \"" << m_axi_ddr_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_WID\" :  \"" << m_axi_ddr_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_WUSER\" :  \"" << m_axi_ddr_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARVALID\" :  \"" << m_axi_ddr_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_ARREADY\" :  \"" << m_axi_ddr_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARADDR\" :  \"" << m_axi_ddr_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARID\" :  \"" << m_axi_ddr_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARLEN\" :  \"" << m_axi_ddr_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARSIZE\" :  \"" << m_axi_ddr_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARBURST\" :  \"" << m_axi_ddr_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARLOCK\" :  \"" << m_axi_ddr_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARCACHE\" :  \"" << m_axi_ddr_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARPROT\" :  \"" << m_axi_ddr_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARQOS\" :  \"" << m_axi_ddr_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARREGION\" :  \"" << m_axi_ddr_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_ARUSER\" :  \"" << m_axi_ddr_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_RVALID\" :  \"" << m_axi_ddr_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_RREADY\" :  \"" << m_axi_ddr_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_RDATA\" :  \"" << m_axi_ddr_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_RLAST\" :  \"" << m_axi_ddr_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_RID\" :  \"" << m_axi_ddr_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_RUSER\" :  \"" << m_axi_ddr_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_RRESP\" :  \"" << m_axi_ddr_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_BVALID\" :  \"" << m_axi_ddr_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ddr_BREADY\" :  \"" << m_axi_ddr_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_BRESP\" :  \"" << m_axi_ddr_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_BID\" :  \"" << m_axi_ddr_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ddr_BUSER\" :  \"" << m_axi_ddr_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_AWVALID\" :  \"" << s_axi_ctrl_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_AWREADY\" :  \"" << s_axi_ctrl_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_AWADDR\" :  \"" << s_axi_ctrl_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WVALID\" :  \"" << s_axi_ctrl_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_WREADY\" :  \"" << s_axi_ctrl_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WDATA\" :  \"" << s_axi_ctrl_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_WSTRB\" :  \"" << s_axi_ctrl_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_ARVALID\" :  \"" << s_axi_ctrl_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_ARREADY\" :  \"" << s_axi_ctrl_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_ARADDR\" :  \"" << s_axi_ctrl_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RVALID\" :  \"" << s_axi_ctrl_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_RREADY\" :  \"" << s_axi_ctrl_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RDATA\" :  \"" << s_axi_ctrl_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_RRESP\" :  \"" << s_axi_ctrl_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_BVALID\" :  \"" << s_axi_ctrl_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_BREADY\" :  \"" << s_axi_ctrl_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_BRESP\" :  \"" << s_axi_ctrl_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

