// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _copyMem_HH_
#define _copyMem_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "copyMem_ctrl_s_axi.h"
#include "copyMem_ddr_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_DDR_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_DDR_ID_WIDTH = 1,
         unsigned int C_M_AXI_DDR_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_DATA_WIDTH = 32,
         unsigned int C_M_AXI_DDR_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_DDR_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct copyMem : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_ddr_AWVALID;
    sc_in< sc_logic > m_axi_ddr_AWREADY;
    sc_out< sc_uint<C_M_AXI_DDR_ADDR_WIDTH> > m_axi_ddr_AWADDR;
    sc_out< sc_uint<C_M_AXI_DDR_ID_WIDTH> > m_axi_ddr_AWID;
    sc_out< sc_lv<8> > m_axi_ddr_AWLEN;
    sc_out< sc_lv<3> > m_axi_ddr_AWSIZE;
    sc_out< sc_lv<2> > m_axi_ddr_AWBURST;
    sc_out< sc_lv<2> > m_axi_ddr_AWLOCK;
    sc_out< sc_lv<4> > m_axi_ddr_AWCACHE;
    sc_out< sc_lv<3> > m_axi_ddr_AWPROT;
    sc_out< sc_lv<4> > m_axi_ddr_AWQOS;
    sc_out< sc_lv<4> > m_axi_ddr_AWREGION;
    sc_out< sc_uint<C_M_AXI_DDR_AWUSER_WIDTH> > m_axi_ddr_AWUSER;
    sc_out< sc_logic > m_axi_ddr_WVALID;
    sc_in< sc_logic > m_axi_ddr_WREADY;
    sc_out< sc_uint<C_M_AXI_DDR_DATA_WIDTH> > m_axi_ddr_WDATA;
    sc_out< sc_uint<C_M_AXI_DDR_DATA_WIDTH/8> > m_axi_ddr_WSTRB;
    sc_out< sc_logic > m_axi_ddr_WLAST;
    sc_out< sc_uint<C_M_AXI_DDR_ID_WIDTH> > m_axi_ddr_WID;
    sc_out< sc_uint<C_M_AXI_DDR_WUSER_WIDTH> > m_axi_ddr_WUSER;
    sc_out< sc_logic > m_axi_ddr_ARVALID;
    sc_in< sc_logic > m_axi_ddr_ARREADY;
    sc_out< sc_uint<C_M_AXI_DDR_ADDR_WIDTH> > m_axi_ddr_ARADDR;
    sc_out< sc_uint<C_M_AXI_DDR_ID_WIDTH> > m_axi_ddr_ARID;
    sc_out< sc_lv<8> > m_axi_ddr_ARLEN;
    sc_out< sc_lv<3> > m_axi_ddr_ARSIZE;
    sc_out< sc_lv<2> > m_axi_ddr_ARBURST;
    sc_out< sc_lv<2> > m_axi_ddr_ARLOCK;
    sc_out< sc_lv<4> > m_axi_ddr_ARCACHE;
    sc_out< sc_lv<3> > m_axi_ddr_ARPROT;
    sc_out< sc_lv<4> > m_axi_ddr_ARQOS;
    sc_out< sc_lv<4> > m_axi_ddr_ARREGION;
    sc_out< sc_uint<C_M_AXI_DDR_ARUSER_WIDTH> > m_axi_ddr_ARUSER;
    sc_in< sc_logic > m_axi_ddr_RVALID;
    sc_out< sc_logic > m_axi_ddr_RREADY;
    sc_in< sc_uint<C_M_AXI_DDR_DATA_WIDTH> > m_axi_ddr_RDATA;
    sc_in< sc_logic > m_axi_ddr_RLAST;
    sc_in< sc_uint<C_M_AXI_DDR_ID_WIDTH> > m_axi_ddr_RID;
    sc_in< sc_uint<C_M_AXI_DDR_RUSER_WIDTH> > m_axi_ddr_RUSER;
    sc_in< sc_lv<2> > m_axi_ddr_RRESP;
    sc_in< sc_logic > m_axi_ddr_BVALID;
    sc_out< sc_logic > m_axi_ddr_BREADY;
    sc_in< sc_lv<2> > m_axi_ddr_BRESP;
    sc_in< sc_uint<C_M_AXI_DDR_ID_WIDTH> > m_axi_ddr_BID;
    sc_in< sc_uint<C_M_AXI_DDR_BUSER_WIDTH> > m_axi_ddr_BUSER;
    sc_in< sc_logic > s_axi_ctrl_AWVALID;
    sc_out< sc_logic > s_axi_ctrl_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_ctrl_AWADDR;
    sc_in< sc_logic > s_axi_ctrl_WVALID;
    sc_out< sc_logic > s_axi_ctrl_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_ctrl_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_ctrl_WSTRB;
    sc_in< sc_logic > s_axi_ctrl_ARVALID;
    sc_out< sc_logic > s_axi_ctrl_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_ctrl_ARADDR;
    sc_out< sc_logic > s_axi_ctrl_RVALID;
    sc_in< sc_logic > s_axi_ctrl_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_ctrl_RDATA;
    sc_out< sc_lv<2> > s_axi_ctrl_RRESP;
    sc_out< sc_logic > s_axi_ctrl_BVALID;
    sc_in< sc_logic > s_axi_ctrl_BREADY;
    sc_out< sc_lv<2> > s_axi_ctrl_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const5;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const4;
    sc_signal< sc_lv<1> > ap_var_for_const6;


    // Module declarations
    copyMem(sc_module_name name);
    SC_HAS_PROCESS(copyMem);

    ~copyMem();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    copyMem_ctrl_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* copyMem_ctrl_s_axi_U;
    copyMem_ddr_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_DDR_ID_WIDTH,C_M_AXI_DDR_ADDR_WIDTH,C_M_AXI_DDR_DATA_WIDTH,C_M_AXI_DDR_AWUSER_WIDTH,C_M_AXI_DDR_ARUSER_WIDTH,C_M_AXI_DDR_WUSER_WIDTH,C_M_AXI_DDR_RUSER_WIDTH,C_M_AXI_DDR_BUSER_WIDTH,C_M_AXI_DDR_USER_VALUE,C_M_AXI_DDR_PROT_VALUE,C_M_AXI_DDR_CACHE_VALUE>* copyMem_ddr_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > dst;
    sc_signal< sc_lv<32> > src;
    sc_signal< sc_lv<64> > bytes;
    sc_signal< sc_logic > ddr_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ddr_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > exitcond_fu_139_p2;
    sc_signal< sc_logic > ddr_blk_n_AW;
    sc_signal< sc_logic > ddr_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ddr_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ddr_AWVALID;
    sc_signal< sc_logic > ddr_AWREADY;
    sc_signal< sc_logic > ddr_WVALID;
    sc_signal< sc_logic > ddr_WREADY;
    sc_signal< sc_logic > ddr_ARVALID;
    sc_signal< sc_logic > ddr_ARREADY;
    sc_signal< sc_logic > ddr_RVALID;
    sc_signal< sc_logic > ddr_RREADY;
    sc_signal< sc_lv<8> > ddr_RDATA;
    sc_signal< sc_logic > ddr_RLAST;
    sc_signal< sc_lv<1> > ddr_RID;
    sc_signal< sc_lv<1> > ddr_RUSER;
    sc_signal< sc_lv<2> > ddr_RRESP;
    sc_signal< sc_logic > ddr_BVALID;
    sc_signal< sc_logic > ddr_BREADY;
    sc_signal< sc_lv<2> > ddr_BRESP;
    sc_signal< sc_lv<1> > ddr_BID;
    sc_signal< sc_lv<1> > ddr_BUSER;
    sc_signal< sc_lv<64> > bytes_read_reg_150;
    sc_signal< sc_lv<32> > ddr_addr_reg_155;
    sc_signal< sc_lv<32> > ddr_addr_1_reg_161;
    sc_signal< sc_lv<32> > tmp_fu_135_p1;
    sc_signal< sc_lv<32> > tmp_reg_167;
    sc_signal< sc_lv<64> > i_1_fu_144_p2;
    sc_signal< sc_lv<64> > i_1_reg_176;
    sc_signal< bool > ap_block_state9;
    sc_signal< sc_lv<8> > ddr_addr_read_reg_181;
    sc_signal< sc_lv<64> > i_reg_104;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_sig_ioackin_ddr_WREADY;
    sc_signal< sc_lv<64> > tmp_1_fu_115_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_125_p1;
    sc_signal< sc_logic > ap_reg_ioackin_ddr_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_ddr_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_ddr_AWREADY;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_logic > ap_reg_ioackin_ddr_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_ddr_WREADY;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_fsm_state1;
    static const sc_lv<14> ap_ST_fsm_state2;
    static const sc_lv<14> ap_ST_fsm_state3;
    static const sc_lv<14> ap_ST_fsm_state4;
    static const sc_lv<14> ap_ST_fsm_state5;
    static const sc_lv<14> ap_ST_fsm_state6;
    static const sc_lv<14> ap_ST_fsm_state7;
    static const sc_lv<14> ap_ST_fsm_state8;
    static const sc_lv<14> ap_ST_fsm_state9;
    static const sc_lv<14> ap_ST_fsm_state10;
    static const sc_lv<14> ap_ST_fsm_state11;
    static const sc_lv<14> ap_ST_fsm_state12;
    static const sc_lv<14> ap_ST_fsm_state13;
    static const sc_lv<14> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_D;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_DDR_USER_VALUE;
    static const int C_M_AXI_DDR_PROT_VALUE;
    static const int C_M_AXI_DDR_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state2_io();
    void thread_ap_block_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_ddr_ARREADY();
    void thread_ap_sig_ioackin_ddr_AWREADY();
    void thread_ap_sig_ioackin_ddr_WREADY();
    void thread_ddr_ARVALID();
    void thread_ddr_AWVALID();
    void thread_ddr_BREADY();
    void thread_ddr_RREADY();
    void thread_ddr_WVALID();
    void thread_ddr_blk_n_AR();
    void thread_ddr_blk_n_AW();
    void thread_ddr_blk_n_B();
    void thread_ddr_blk_n_R();
    void thread_ddr_blk_n_W();
    void thread_exitcond_fu_139_p2();
    void thread_i_1_fu_144_p2();
    void thread_tmp_1_fu_115_p1();
    void thread_tmp_2_fu_125_p1();
    void thread_tmp_fu_135_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
